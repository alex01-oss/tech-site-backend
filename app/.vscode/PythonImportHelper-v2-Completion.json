[
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "psycopg2",
        "description": "psycopg2",
        "isExtraImport": true,
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "issue_tokens",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "decode_token",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "get_current_user_optional",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ProductGrindingWheels",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "EquipmentModel",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "EquipmentCode",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "LoginRequest",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "RegisterRequest",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "RefreshTokenRequest",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "LogoutRequest",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserData",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserData",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UpdateUserRequest",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserData",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "UTC",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "app.models.post",
        "description": "app.models.post",
        "isExtraImport": true,
        "detail": "app.models.post",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "CreatePostRequest",
        "importPath": "app.schemas.post_schema",
        "description": "app.schemas.post_schema",
        "isExtraImport": true,
        "detail": "app.schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "DeletePostResponse",
        "importPath": "app.schemas.post_schema",
        "description": "app.schemas.post_schema",
        "isExtraImport": true,
        "detail": "app.schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "EditPostRequest",
        "importPath": "app.schemas.post_schema",
        "description": "app.schemas.post_schema",
        "isExtraImport": true,
        "detail": "app.schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "PostResponse",
        "importPath": "app.schemas.post_schema",
        "description": "app.schemas.post_schema",
        "isExtraImport": true,
        "detail": "app.schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "ImageUploadResponse",
        "importPath": "app.schemas.post_schema",
        "description": "app.schemas.post_schema",
        "isExtraImport": true,
        "detail": "app.schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "cache_get",
        "importPath": "app.utils.cache",
        "description": "app.utils.cache",
        "isExtraImport": true,
        "detail": "app.utils.cache",
        "documentation": {}
    },
    {
        "label": "cache_set",
        "importPath": "app.utils.cache",
        "description": "app.utils.cache",
        "isExtraImport": true,
        "detail": "app.utils.cache",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "importPath": "app.utils.cache",
        "description": "app.utils.cache",
        "isExtraImport": true,
        "detail": "app.utils.cache",
        "documentation": {}
    },
    {
        "label": "cache_get",
        "importPath": "app.utils.cache",
        "description": "app.utils.cache",
        "isExtraImport": true,
        "detail": "app.utils.cache",
        "documentation": {}
    },
    {
        "label": "cache_set",
        "importPath": "app.utils.cache",
        "description": "app.utils.cache",
        "isExtraImport": true,
        "detail": "app.utils.cache",
        "documentation": {}
    },
    {
        "label": "cache_set",
        "importPath": "app.utils.cache",
        "description": "app.utils.cache",
        "isExtraImport": true,
        "detail": "app.utils.cache",
        "documentation": {}
    },
    {
        "label": "cache_get",
        "importPath": "app.utils.cache",
        "description": "app.utils.cache",
        "isExtraImport": true,
        "detail": "app.utils.cache",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "app.models.cart_item",
        "description": "app.models.cart_item",
        "isExtraImport": true,
        "detail": "app.models.cart_item",
        "documentation": {}
    },
    {
        "label": "ProductGrindingWheels",
        "importPath": "app.models.product_grinding_wheels",
        "description": "app.models.product_grinding_wheels",
        "isExtraImport": true,
        "detail": "app.models.product_grinding_wheels",
        "documentation": {}
    },
    {
        "label": "CartListResponse",
        "importPath": "app.schemas.cart_schema",
        "description": "app.schemas.cart_schema",
        "isExtraImport": true,
        "detail": "app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "CartRequest",
        "importPath": "app.schemas.cart_schema",
        "description": "app.schemas.cart_schema",
        "isExtraImport": true,
        "detail": "app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "CartResponse",
        "importPath": "app.schemas.cart_schema",
        "description": "app.schemas.cart_schema",
        "isExtraImport": true,
        "detail": "app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "GetCartResponse",
        "importPath": "app.schemas.cart_schema",
        "description": "app.schemas.cart_schema",
        "isExtraImport": true,
        "detail": "app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.schemas.cart_schema",
        "description": "app.schemas.cart_schema",
        "isExtraImport": true,
        "detail": "app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "CatalogItemSchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogQuerySchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogResponseSchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogItemDetailedSchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "EquipmentModelSchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogItemSchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogItemSchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogQuerySchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "build_catalog_item",
        "importPath": "app.utils.catalog_helpers",
        "description": "app.utils.catalog_helpers",
        "isExtraImport": true,
        "detail": "app.utils.catalog_helpers",
        "documentation": {}
    },
    {
        "label": "make_cache_key",
        "importPath": "app.utils.catalog_helpers",
        "description": "app.utils.catalog_helpers",
        "isExtraImport": true,
        "detail": "app.utils.catalog_helpers",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.settings",
        "description": "app.core.settings",
        "isExtraImport": true,
        "detail": "app.core.settings",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.settings",
        "description": "app.core.settings",
        "isExtraImport": true,
        "detail": "app.core.settings",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.settings",
        "description": "app.core.settings",
        "isExtraImport": true,
        "detail": "app.core.settings",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "app.models.refresh_token",
        "description": "app.models.refresh_token",
        "isExtraImport": true,
        "detail": "app.models.refresh_token",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic.v1",
        "description": "pydantic.v1",
        "isExtraImport": true,
        "detail": "pydantic.v1",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "redis.asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "Limiter",
        "importPath": "slowapi",
        "description": "slowapi",
        "isExtraImport": true,
        "detail": "slowapi",
        "documentation": {}
    },
    {
        "label": "get_remote_address",
        "importPath": "slowapi.util",
        "description": "slowapi.util",
        "isExtraImport": true,
        "detail": "slowapi.util",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "starlette.staticfiles",
        "description": "starlette.staticfiles",
        "isExtraImport": true,
        "detail": "starlette.staticfiles",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "users",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "catalog",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "cart",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "blog",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "media",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "menu",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api.routes.auth",
        "description": "api.routes.auth",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/auth\",\n    tags=[\"Authorization\"]\n)\n@router.post(\"/login\", response_model=TokenResponse)\nasync def login(\n        user_data: LoginRequest,\n        db: Session = Depends(get_db)\n):\n    user = db.query(User).filter(User.email == user_data.email).first()",
        "detail": "api.routes.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api.routes.blog",
        "description": "api.routes.blog",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/blog\",\n    tags=[\"Blog\"]\n)\n@router.post(\"\", response_model=PostResponse)\nasync def create_post(\n        data: CreatePostRequest,\n        db: Session = Depends(get_db),\n        user: UserData = Depends(admin_required)\n):",
        "detail": "api.routes.blog",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api.routes.cart",
        "description": "api.routes.cart",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/cart\",\n    tags=[\"Cart\"]\n)\n@router.get(\"\", response_model=CartListResponse)\nasync def get_cart(\n        db: Session = Depends(get_db),\n        user: User = Depends(get_current_user)\n):\n    try:",
        "detail": "api.routes.cart",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api.routes.catalog",
        "description": "api.routes.catalog",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/catalog\",\n    tags=[\"Catalog\"]\n)\n@router.get(\"\", response_model=CatalogResponseSchema)\nasync def get_catalog_items(\n    query_params: CatalogQuerySchema = Depends(),\n    db: Session = Depends(get_db),\n    user: Optional[User] = Depends(get_current_user_optional)\n):",
        "detail": "api.routes.catalog",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api.routes.filters",
        "description": "api.routes.filters",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/filters\",\n    tags=[\"Products\"]\n)\n@router.get(\"\", response_model=List[Dict[str, Any]])\nasync def get_sidebar_filters():\n    try:\n        csv_path = Path(__file__).resolve().parents[3] / \"data.csv\"\n        if not csv_path.exists():\n            raise FileNotFoundError(f\"File not found at the calculated path: {csv_path}\")",
        "detail": "api.routes.filters",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api.routes.media",
        "description": "api.routes.media",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/images\",\n    tags=[\"Media\"]\n)\n@router.get(\"/{filename}\")\nasync def serve_image(filename: str):\n    file_path = os.path.join(\"app/static/images\", filename)\n    if os.path.exists(file_path):\n        return FileResponse(file_path, media_type=\"image/png\")\n    raise HTTPException(status_code=404, detail=\"File not found\")",
        "detail": "api.routes.media",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api.routes.menu",
        "description": "api.routes.menu",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/menu\",\n    tags=[\"Menu\"]\n)\n@router.get(\"\", response_model=Dict[str, Any])\nasync def return_menu():\n    try:\n        cache_key = \"menu_data\"\n        cached = await cache_get(cache_key)\n        if cached:",
        "detail": "api.routes.menu",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api.routes.users",
        "description": "api.routes.users",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/user\",\n    tags=[\"User\"]\n)\n@router.get(\"\", response_model=UserResponse)\nasync def get_current_user(\n        user: User = Depends(get_current_user),\n):\n    return UserResponse(user=UserData.model_validate(user))\n@router.patch(\"\", response_model=dict)",
        "detail": "api.routes.users",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "api.dependencies",
        "description": "api.dependencies",
        "peekOfCode": "def get_db() -> Generator:\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        try:\n            db.close()\n        except Exception as e:\n            logging.error(f\"Error while closing DB session: {e}\")\n            raise",
        "detail": "api.dependencies",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "core.database",
        "description": "core.database",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass",
        "detail": "core.database",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "core.database",
        "description": "core.database",
        "peekOfCode": "DATABASE_URL = settings.SQLALCHEMY_DATABASE_URI\nif not DATABASE_URL:\n    raise ValueError(\"DATABASE_URL is not set\")\nengine = create_engine(\n    DATABASE_URL,\n    pool_size=20,\n    max_overflow=30,\n    pool_recycle=3600,\n    pool_pre_ping=True\n)",
        "detail": "core.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "core.database",
        "description": "core.database",
        "peekOfCode": "engine = create_engine(\n    DATABASE_URL,\n    pool_size=20,\n    max_overflow=30,\n    pool_recycle=3600,\n    pool_pre_ping=True\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nclass Base(DeclarativeBase):\n    pass",
        "detail": "core.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "core.database",
        "description": "core.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nclass Base(DeclarativeBase):\n    pass",
        "detail": "core.database",
        "documentation": {}
    },
    {
        "label": "log_dir",
        "kind": 5,
        "importPath": "core.logger",
        "description": "core.logger",
        "peekOfCode": "log_dir = Path(\"logs\")\nlog_dir.mkdir(exist_ok=True)\nlogger = logging.getLogger(\"app\")\nlogger.setLevel(logging.INFO)\nconsole_handler = logging.StreamHandler(sys.stdout)\nconsole_handler.setLevel(logging.INFO)\nconsole_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nconsole_handler.setFormatter(console_format)\nfile_handler = logging.FileHandler(log_dir / \"app.log\")\nfile_handler.setLevel(logging.INFO)",
        "detail": "core.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "core.logger",
        "description": "core.logger",
        "peekOfCode": "logger = logging.getLogger(\"app\")\nlogger.setLevel(logging.INFO)\nconsole_handler = logging.StreamHandler(sys.stdout)\nconsole_handler.setLevel(logging.INFO)\nconsole_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nconsole_handler.setFormatter(console_format)\nfile_handler = logging.FileHandler(log_dir / \"app.log\")\nfile_handler.setLevel(logging.INFO)\nfile_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfile_handler.setFormatter(file_format)",
        "detail": "core.logger",
        "documentation": {}
    },
    {
        "label": "console_handler",
        "kind": 5,
        "importPath": "core.logger",
        "description": "core.logger",
        "peekOfCode": "console_handler = logging.StreamHandler(sys.stdout)\nconsole_handler.setLevel(logging.INFO)\nconsole_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nconsole_handler.setFormatter(console_format)\nfile_handler = logging.FileHandler(log_dir / \"app.log\")\nfile_handler.setLevel(logging.INFO)\nfile_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfile_handler.setFormatter(file_format)\nlogger.addHandler(console_handler)\nlogger.addHandler(file_handler)",
        "detail": "core.logger",
        "documentation": {}
    },
    {
        "label": "console_format",
        "kind": 5,
        "importPath": "core.logger",
        "description": "core.logger",
        "peekOfCode": "console_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nconsole_handler.setFormatter(console_format)\nfile_handler = logging.FileHandler(log_dir / \"app.log\")\nfile_handler.setLevel(logging.INFO)\nfile_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfile_handler.setFormatter(file_format)\nlogger.addHandler(console_handler)\nlogger.addHandler(file_handler)",
        "detail": "core.logger",
        "documentation": {}
    },
    {
        "label": "file_handler",
        "kind": 5,
        "importPath": "core.logger",
        "description": "core.logger",
        "peekOfCode": "file_handler = logging.FileHandler(log_dir / \"app.log\")\nfile_handler.setLevel(logging.INFO)\nfile_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfile_handler.setFormatter(file_format)\nlogger.addHandler(console_handler)\nlogger.addHandler(file_handler)",
        "detail": "core.logger",
        "documentation": {}
    },
    {
        "label": "file_format",
        "kind": 5,
        "importPath": "core.logger",
        "description": "core.logger",
        "peekOfCode": "file_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfile_handler.setFormatter(file_format)\nlogger.addHandler(console_handler)\nlogger.addHandler(file_handler)",
        "detail": "core.logger",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "core.security",
        "description": "core.security",
        "peekOfCode": "def hash_password(password) -> str:\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef create_access_token(identity: Union[str, Any]) -> str:\n    expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode = {\n        \"sub\": str(identity),\n        \"exp\": expire,\n        \"type\": \"access\"",
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "core.security",
        "description": "core.security",
        "peekOfCode": "def verify_password(plain_password, hashed_password) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef create_access_token(identity: Union[str, Any]) -> str:\n    expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode = {\n        \"sub\": str(identity),\n        \"exp\": expire,\n        \"type\": \"access\"\n    }\n    return jwt.encode(to_encode, settings.ACCESS_TOKEN_SECRET_KEY, algorithm=settings.ALGORITHM)",
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "core.security",
        "description": "core.security",
        "peekOfCode": "def create_access_token(identity: Union[str, Any]) -> str:\n    expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode = {\n        \"sub\": str(identity),\n        \"exp\": expire,\n        \"type\": \"access\"\n    }\n    return jwt.encode(to_encode, settings.ACCESS_TOKEN_SECRET_KEY, algorithm=settings.ALGORITHM)\ndef create_refresh_token(identity: Union[str, Any], db: Session) -> str:\n    db.query(RefreshToken).filter(RefreshToken.user_id == int(identity)).delete()",
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "kind": 2,
        "importPath": "core.security",
        "description": "core.security",
        "peekOfCode": "def create_refresh_token(identity: Union[str, Any], db: Session) -> str:\n    db.query(RefreshToken).filter(RefreshToken.user_id == int(identity)).delete()\n    db.commit()\n    expire = datetime.utcnow() + timedelta(minutes=settings.REFRESH_TOKEN_EXPIRE_MINUTES)\n    to_encode = {\n        \"sub\": str(identity),\n        \"exp\": expire,\n        \"type\": \"refresh\"\n    }\n    encoded_jwt = jwt.encode(to_encode, settings.REFRESH_TOKEN_SECRET_KEY, algorithm=settings.ALGORITHM)",
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "decode_token",
        "kind": 2,
        "importPath": "core.security",
        "description": "core.security",
        "peekOfCode": "def decode_token(token: str) -> dict:\n    if not token or len(token) < 20:\n        raise HTTPException(status_code=401, detail=\"Invalid token format\")\n    try:\n        unverified_payload = jwt.get_unverified_claims(token)\n        token_type = unverified_payload.get(\"type\")\n    except Exception:\n        raise HTTPException(\n            status_code=401,\n            detail=\"Could not decode token\",",
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "core.security",
        "description": "core.security",
        "peekOfCode": "def get_current_user(\n    token: str = Depends(oauth2_scheme),\n    db: Session = Depends(get_db)\n) -> Type[User]:\n    payload = decode_token(token)\n    if payload.get(\"type\") != \"access\":\n        raise HTTPException(\n            status_code=401,\n            detail=\"Use access token for authentication\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},",
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme_optional",
        "kind": 2,
        "importPath": "core.security",
        "description": "core.security",
        "peekOfCode": "def oauth2_scheme_optional(authorization: str = Header(None)) -> Optional[str]:\n    if authorization and authorization.startswith(\"Bearer \"):\n        return authorization.replace(\"Bearer \", \"\")\n    return None\ndef get_current_user_optional(\n    token: Optional[str] = Depends(oauth2_scheme_optional),\n    db: Session = Depends(get_db)\n) -> Optional[User]:\n    if not token:\n        return None",
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "get_current_user_optional",
        "kind": 2,
        "importPath": "core.security",
        "description": "core.security",
        "peekOfCode": "def get_current_user_optional(\n    token: Optional[str] = Depends(oauth2_scheme_optional),\n    db: Session = Depends(get_db)\n) -> Optional[User]:\n    if not token:\n        return None\n    try:\n        payload = decode_token(token)\n        user_id = payload.get(\"sub\")\n        if not user_id:",
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "kind": 2,
        "importPath": "core.security",
        "description": "core.security",
        "peekOfCode": "def admin_required(user=Depends(get_current_user)):\n    if user.role != \"admin\":\n        raise HTTPException(\n            status_code=403,\n            detail=\"Admin access only\"\n        )\n    return user\ndef issue_tokens(user_id: int, db: Session) -> dict:\n    access_token = create_access_token(user_id)\n    refresh_token = create_refresh_token(user_id, db)",
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "issue_tokens",
        "kind": 2,
        "importPath": "core.security",
        "description": "core.security",
        "peekOfCode": "def issue_tokens(user_id: int, db: Session) -> dict:\n    access_token = create_access_token(user_id)\n    refresh_token = create_refresh_token(user_id, db)\n    return {\n        \"access_token\": access_token,\n        \"refresh_token\": refresh_token,\n        \"token_type\": \"bearer\"\n    }",
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "core.security",
        "description": "core.security",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"api/login\")\ndef hash_password(password) -> str:\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef create_access_token(identity: Union[str, Any]) -> str:\n    expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode = {\n        \"sub\": str(identity),",
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "core.security",
        "description": "core.security",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"api/login\")\ndef hash_password(password) -> str:\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef create_access_token(identity: Union[str, Any]) -> str:\n    expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode = {\n        \"sub\": str(identity),\n        \"exp\": expire,",
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "class Settings(BaseSettings):\n    SQLALCHEMY_DATABASE_URI: str = os.getenv('DATABASE_URL')\n    ITEMS_PER_PAGE: int = int(os.getenv('ITEMS_PER_PAGE'))\n    ACCESS_TOKEN_SECRET_KEY: str = os.getenv(\"SECRET_KEY\")\n    REFRESH_TOKEN_SECRET_KEY: str = os.getenv(\"SUPER_SECRET_KEY\")\n    ACCESS_TOKEN_EXPIRE_MINUTES=int(os.getenv('ACCESS_TOKEN_EXPIRE_MINUTES'))\n    REFRESH_TOKEN_EXPIRE_MINUTES=int(os.getenv('REFRESH_TOKEN_EXPIRE_MINUTES'))\n    ALGORITHM: str = os.getenv('ALGORITHM')\n    CACHE_TYPE: str = \"RedisCache\"\n    CACHE_REDIS_HOST: str = os.getenv(\"CACHE_REDIS_HOST\")",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "strtobool",
        "kind": 2,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "def strtobool(val: str) -> bool:\n    val = val.lower()\n    if val in (\"y\", \"yes\", \"t\", \"true\", \"on\", \"1\"):\n        return True\n    elif val in (\"n\", \"no\", \"f\", \"false\", \"off\", \"0\"):\n        return False\n    raise ValueError(f\"invalid truth value {val!r}\")\nclass Settings(BaseSettings):\n    SQLALCHEMY_DATABASE_URI: str = os.getenv('DATABASE_URL')\n    ITEMS_PER_PAGE: int = int(os.getenv('ITEMS_PER_PAGE'))",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "settings = Settings()",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "Bond",
        "kind": 6,
        "importPath": "models.bond",
        "description": "models.bond",
        "peekOfCode": "class Bond(Base):\n    __tablename__ = 'bond'\n    id = Column(Integer, primary_key=True)\n    name_bond = Column(String, nullable=False, unique=True, index=True)\n    bond_description = Column(String, nullable=False)\n    bond_cooling = Column(String, nullable=False)\n    products = relationship(\"ProductGrindingWheels\", back_populates=\"bond\")",
        "detail": "models.bond",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "kind": 6,
        "importPath": "models.cart_item",
        "description": "models.cart_item",
        "peekOfCode": "class CartItem(Base):\n    __tablename__ = 'cart'\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), nullable=False)\n    product_code = Column(String, ForeignKey('product_grinding_wheels.code'), nullable=False)\n    quantity = Column(Integer, default=1)\n    user = relationship(\"User\", back_populates=\"cart_items\")\n    product = relationship(\"ProductGrindingWheels\", back_populates=\"cart_items\")",
        "detail": "models.cart_item",
        "documentation": {}
    },
    {
        "label": "EquipmentCode",
        "kind": 6,
        "importPath": "models.equipment_code",
        "description": "models.equipment_code",
        "peekOfCode": "class EquipmentCode(Base):\n    __tablename__ = 'equipment_code'\n    name_equipment = Column(String, ForeignKey('equipment_model.name_equipment'), nullable=False, primary_key=True)\n    code = Column(String, ForeignKey('product_grinding_wheels.code'), nullable=False, primary_key=True, index=True)\n    product = relationship(\n        \"ProductGrindingWheels\",\n        primaryjoin=\"EquipmentCode.code == ProductGrindingWheels.code\",\n        back_populates=\"equipment_codes\"\n    )\n    equipment_model = relationship(\"EquipmentModel\", back_populates=\"equipment_codes\")",
        "detail": "models.equipment_code",
        "documentation": {}
    },
    {
        "label": "EquipmentModel",
        "kind": 6,
        "importPath": "models.equipment_model",
        "description": "models.equipment_model",
        "peekOfCode": "class EquipmentModel(Base):\n    __tablename__ = 'equipment_model'\n    id = Column(Integer, primary_key=True)\n    name_equipment = Column(String, nullable=False, unique=True, index=True)\n    name_producer = Column(String, ForeignKey('producer_name.name_producer'), nullable=False)\n    equipment_codes = relationship(\"EquipmentCode\", back_populates=\"equipment_model\")\n    producer = relationship(\"ProducerName\", back_populates=\"equipment_models\")",
        "detail": "models.equipment_model",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "models.post",
        "description": "models.post",
        "peekOfCode": "class Post(Base):\n    __tablename__ = \"posts\"\n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\", ondelete='CASCADE'), nullable=False)\n    title = Column(String, nullable=False)\n    content = Column(String, nullable=False)\n    image = Column(String, nullable=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n    user = relationship(\"User\", back_populates=\"posts\")",
        "detail": "models.post",
        "documentation": {}
    },
    {
        "label": "ProducerName",
        "kind": 6,
        "importPath": "models.producer_name",
        "description": "models.producer_name",
        "peekOfCode": "class ProducerName(Base):\n    __tablename__ = 'producer_name'\n    id = Column(Integer, primary_key=True)\n    name_producer = Column(String, nullable=False, unique=True, index=True)\n    equipment_models = relationship(\"EquipmentModel\", back_populates=\"producer\")",
        "detail": "models.producer_name",
        "documentation": {}
    },
    {
        "label": "ProductGrindingWheels",
        "kind": 6,
        "importPath": "models.product_grinding_wheels",
        "description": "models.product_grinding_wheels",
        "peekOfCode": "class ProductGrindingWheels(Base):\n    __tablename__ = 'product_grinding_wheels'\n    code = Column(String, primary_key=True, index=True)\n    shape = Column(String, ForeignKey('shape_img.shape'), nullable=False)\n    dimensions = Column(String, nullable=False)\n    name_bond = Column(String, ForeignKey('bond.name_bond'), nullable=False)\n    grid_size = Column(String, nullable=False)\n    cart_items = relationship(\"CartItem\", back_populates=\"product\")\n    bond = relationship(\"Bond\", back_populates=\"products\")\n    shape_info = relationship(\"ShapeImg\", back_populates=\"products\")",
        "detail": "models.product_grinding_wheels",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "kind": 6,
        "importPath": "models.refresh_token",
        "description": "models.refresh_token",
        "peekOfCode": "class RefreshToken(Base):\n    __tablename__ = 'refresh_tokens'\n    id = Column(Integer, primary_key=True)\n    user_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), nullable=False)\n    refresh_token = Column(String, nullable=False, index=True)\n    created_at = Column(DateTime, server_default=func.now(), nullable=False)\n    user = relationship('User',back_populates='refresh_tokens')",
        "detail": "models.refresh_token",
        "documentation": {}
    },
    {
        "label": "ShapeImg",
        "kind": 6,
        "importPath": "models.shape_img",
        "description": "models.shape_img",
        "peekOfCode": "class ShapeImg(Base):\n    __tablename__ = 'shape_img'\n    id = Column(Integer, primary_key=True)\n    shape = Column(String, nullable=False, unique=True, index=True)\n    img_url = Column(String, nullable=False)\n    products = relationship(\"ProductGrindingWheels\", back_populates=\"shape_info\")",
        "detail": "models.shape_img",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models.user",
        "description": "models.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True, index=True)\n    role = Column(String, index=True, default='user')\n    full_name = Column(String, nullable=False, index=True)\n    email = Column(String, unique=True, nullable=False, index=True)\n    phone = Column(String, unique=True, nullable=False, index=True)\n    password_hash = Column(String, nullable=False)\n    cart_items = relationship(\n        \"CartItem\",",
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "CartRequest",
        "kind": 6,
        "importPath": "schemas.cart_schema",
        "description": "schemas.cart_schema",
        "peekOfCode": "class CartRequest(BaseModel):\n    code: str\nclass CartResponse(BaseModel):\n    message: str\nclass UpdateCartItemRequest(BaseModel):\n    quantity: int = Field(..., ge=1)\nclass GetCartResponse(BaseModel):\n    product: CatalogItemSchema\n    quantity: str\n    class Config:",
        "detail": "schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "CartResponse",
        "kind": 6,
        "importPath": "schemas.cart_schema",
        "description": "schemas.cart_schema",
        "peekOfCode": "class CartResponse(BaseModel):\n    message: str\nclass UpdateCartItemRequest(BaseModel):\n    quantity: int = Field(..., ge=1)\nclass GetCartResponse(BaseModel):\n    product: CatalogItemSchema\n    quantity: str\n    class Config:\n        from_attributes = True\nclass CartListResponse(BaseModel):",
        "detail": "schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "UpdateCartItemRequest",
        "kind": 6,
        "importPath": "schemas.cart_schema",
        "description": "schemas.cart_schema",
        "peekOfCode": "class UpdateCartItemRequest(BaseModel):\n    quantity: int = Field(..., ge=1)\nclass GetCartResponse(BaseModel):\n    product: CatalogItemSchema\n    quantity: str\n    class Config:\n        from_attributes = True\nclass CartListResponse(BaseModel):\n    cart: List[GetCartResponse]",
        "detail": "schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "GetCartResponse",
        "kind": 6,
        "importPath": "schemas.cart_schema",
        "description": "schemas.cart_schema",
        "peekOfCode": "class GetCartResponse(BaseModel):\n    product: CatalogItemSchema\n    quantity: str\n    class Config:\n        from_attributes = True\nclass CartListResponse(BaseModel):\n    cart: List[GetCartResponse]",
        "detail": "schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "CartListResponse",
        "kind": 6,
        "importPath": "schemas.cart_schema",
        "description": "schemas.cart_schema",
        "peekOfCode": "class CartListResponse(BaseModel):\n    cart: List[GetCartResponse]",
        "detail": "schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "CatalogQuerySchema",
        "kind": 6,
        "importPath": "schemas.catalog_schema",
        "description": "schemas.catalog_schema",
        "peekOfCode": "class CatalogQuerySchema(BaseModel):\n    page: int = Field(default=1, ge=1)\n    items_per_page: int = Field(default=8, ge=1, le=100)\n    search_code: Optional[str] = Field(default=None)\n    search_shape: Optional[str] = Field(default=None)\n    search_dimensions: Optional[str] = Field(default=None)\n    search_machine: Optional[str] = Field(default=None)\n    name_bond: Optional[str] = Field(default=None)\n    grid_size: Optional[str] = Field(default=None)\nclass BondSchema(BaseModel):",
        "detail": "schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "BondSchema",
        "kind": 6,
        "importPath": "schemas.catalog_schema",
        "description": "schemas.catalog_schema",
        "peekOfCode": "class BondSchema(BaseModel):\n    name_bond: str\n    bond_description: str\n    bond_cooling: str\n    class Config:\n        from_attributes = True\nclass EquipmentModelSchema(BaseModel):\n    name_equipment: str\n    name_producer: str\n    class Config:",
        "detail": "schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "EquipmentModelSchema",
        "kind": 6,
        "importPath": "schemas.catalog_schema",
        "description": "schemas.catalog_schema",
        "peekOfCode": "class EquipmentModelSchema(BaseModel):\n    name_equipment: str\n    name_producer: str\n    class Config:\n        from_attributes = True\nclass CatalogItemSchema(BaseModel):\n    code: str\n    shape: Optional[str] = None\n    dimensions: Optional[str] = None\n    images: Optional[str] = None",
        "detail": "schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogItemSchema",
        "kind": 6,
        "importPath": "schemas.catalog_schema",
        "description": "schemas.catalog_schema",
        "peekOfCode": "class CatalogItemSchema(BaseModel):\n    code: str\n    shape: Optional[str] = None\n    dimensions: Optional[str] = None\n    images: Optional[str] = None\n    name_bond: Optional[str] = None\n    grid_size: Optional[str] = None\n    is_in_cart: bool = False\n    class Config:\n        from_attributes = True",
        "detail": "schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogItemDetailedSchema",
        "kind": 6,
        "importPath": "schemas.catalog_schema",
        "description": "schemas.catalog_schema",
        "peekOfCode": "class CatalogItemDetailedSchema(BaseModel):\n    item: CatalogItemSchema\n    bond: Optional[BondSchema]\n    machines: List[EquipmentModelSchema] = []\nclass CatalogResponseSchema(BaseModel):\n    items: List[CatalogItemSchema]\n    total_items: int\n    total_pages: int\n    current_page: int\n    items_per_page: int",
        "detail": "schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogResponseSchema",
        "kind": 6,
        "importPath": "schemas.catalog_schema",
        "description": "schemas.catalog_schema",
        "peekOfCode": "class CatalogResponseSchema(BaseModel):\n    items: List[CatalogItemSchema]\n    total_items: int\n    total_pages: int\n    current_page: int\n    items_per_page: int",
        "detail": "schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CreatePostRequest",
        "kind": 6,
        "importPath": "schemas.post_schema",
        "description": "schemas.post_schema",
        "peekOfCode": "class CreatePostRequest(BaseModel):\n    title: str\n    content: str\n    image: str | None = None\nclass PostResponse(BaseModel):\n    id: int\n    title: str\n    content: str\n    image: Optional[str] = None\n    created_at: datetime",
        "detail": "schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "PostResponse",
        "kind": 6,
        "importPath": "schemas.post_schema",
        "description": "schemas.post_schema",
        "peekOfCode": "class PostResponse(BaseModel):\n    id: int\n    title: str\n    content: str\n    image: Optional[str] = None\n    created_at: datetime\n    updated_at: datetime\n    user_id: int\n    class Config:\n        from_attributes = True",
        "detail": "schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "EditPostRequest",
        "kind": 6,
        "importPath": "schemas.post_schema",
        "description": "schemas.post_schema",
        "peekOfCode": "class EditPostRequest(BaseModel):\n    title: str\n    content: str\n    image: Optional[str] = None\nclass DeletePostResponse(BaseModel):\n    detail: str\nclass ImageUploadResponse(BaseModel):\n    filename: str\n    url: str",
        "detail": "schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "DeletePostResponse",
        "kind": 6,
        "importPath": "schemas.post_schema",
        "description": "schemas.post_schema",
        "peekOfCode": "class DeletePostResponse(BaseModel):\n    detail: str\nclass ImageUploadResponse(BaseModel):\n    filename: str\n    url: str",
        "detail": "schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "ImageUploadResponse",
        "kind": 6,
        "importPath": "schemas.post_schema",
        "description": "schemas.post_schema",
        "peekOfCode": "class ImageUploadResponse(BaseModel):\n    filename: str\n    url: str",
        "detail": "schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "UserData",
        "kind": 6,
        "importPath": "schemas.user_schema",
        "description": "schemas.user_schema",
        "peekOfCode": "class UserData(BaseModel):\n    id: int\n    full_name: str\n    email: str\n    phone: str\n    role: str\n    class Config:\n        from_attributes = True\nclass TokenBundle(BaseModel):\n    access_token: str",
        "detail": "schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "TokenBundle",
        "kind": 6,
        "importPath": "schemas.user_schema",
        "description": "schemas.user_schema",
        "peekOfCode": "class TokenBundle(BaseModel):\n    access_token: str\n    refresh_token: str\n    token_type: str = \"bearer\"\n# request\nclass RegisterRequest(BaseModel):\n    full_name: str\n    email: EmailStr\n    phone: str\n    password: str",
        "detail": "schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "RegisterRequest",
        "kind": 6,
        "importPath": "schemas.user_schema",
        "description": "schemas.user_schema",
        "peekOfCode": "class RegisterRequest(BaseModel):\n    full_name: str\n    email: EmailStr\n    phone: str\n    password: str\nclass LoginRequest(BaseModel):\n    email: EmailStr\n    password: str\nclass RefreshTokenRequest(BaseModel):\n    refresh_token: str",
        "detail": "schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "LoginRequest",
        "kind": 6,
        "importPath": "schemas.user_schema",
        "description": "schemas.user_schema",
        "peekOfCode": "class LoginRequest(BaseModel):\n    email: EmailStr\n    password: str\nclass RefreshTokenRequest(BaseModel):\n    refresh_token: str\nclass LogoutRequest(BaseModel):\n    refresh_token: str\nclass UpdateUserRequest(BaseModel):\n    full_name: str | None = Field(None, min_length=2)\n    email: EmailStr | None = None",
        "detail": "schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "RefreshTokenRequest",
        "kind": 6,
        "importPath": "schemas.user_schema",
        "description": "schemas.user_schema",
        "peekOfCode": "class RefreshTokenRequest(BaseModel):\n    refresh_token: str\nclass LogoutRequest(BaseModel):\n    refresh_token: str\nclass UpdateUserRequest(BaseModel):\n    full_name: str | None = Field(None, min_length=2)\n    email: EmailStr | None = None\n    phone: str | None = Field(None, min_length=8, max_length=20)\n    password: str | None = Field(None, min_length=6)\n# response",
        "detail": "schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "LogoutRequest",
        "kind": 6,
        "importPath": "schemas.user_schema",
        "description": "schemas.user_schema",
        "peekOfCode": "class LogoutRequest(BaseModel):\n    refresh_token: str\nclass UpdateUserRequest(BaseModel):\n    full_name: str | None = Field(None, min_length=2)\n    email: EmailStr | None = None\n    phone: str | None = Field(None, min_length=8, max_length=20)\n    password: str | None = Field(None, min_length=6)\n# response\nclass MessageResponse(BaseModel):\n    message: str",
        "detail": "schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UpdateUserRequest",
        "kind": 6,
        "importPath": "schemas.user_schema",
        "description": "schemas.user_schema",
        "peekOfCode": "class UpdateUserRequest(BaseModel):\n    full_name: str | None = Field(None, min_length=2)\n    email: EmailStr | None = None\n    phone: str | None = Field(None, min_length=8, max_length=20)\n    password: str | None = Field(None, min_length=6)\n# response\nclass MessageResponse(BaseModel):\n    message: str\nclass TokenResponse(TokenBundle):\n    message: str",
        "detail": "schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "MessageResponse",
        "kind": 6,
        "importPath": "schemas.user_schema",
        "description": "schemas.user_schema",
        "peekOfCode": "class MessageResponse(BaseModel):\n    message: str\nclass TokenResponse(TokenBundle):\n    message: str\nclass UserResponse(BaseModel):\n    user: UserData",
        "detail": "schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "TokenResponse",
        "kind": 6,
        "importPath": "schemas.user_schema",
        "description": "schemas.user_schema",
        "peekOfCode": "class TokenResponse(TokenBundle):\n    message: str\nclass UserResponse(BaseModel):\n    user: UserData",
        "detail": "schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "schemas.user_schema",
        "description": "schemas.user_schema",
        "peekOfCode": "class UserResponse(BaseModel):\n    user: UserData",
        "detail": "schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "kind": 5,
        "importPath": "utils.cache",
        "description": "utils.cache",
        "peekOfCode": "redis_client = redis.Redis(\n    host=settings.CACHE_REDIS_HOST,\n    port=settings.CACHE_REDIS_PORT,\n    db=settings.CACHE_REDIS_DB,\n    decode_responses=settings.CACHE_REDIS_DECODE_RESPONSES,\n    password=settings.CACHE_REDIS_PASSWORD\n)\nasync def cache_get(key: str):\n    value = await redis_client.get(key)\n    return json.loads(value) if value else None",
        "detail": "utils.cache",
        "documentation": {}
    },
    {
        "label": "build_catalog_item",
        "kind": 2,
        "importPath": "utils.catalog_helpers",
        "description": "utils.catalog_helpers",
        "peekOfCode": "def build_catalog_item(item, is_in_cart: bool = False) -> CatalogItemSchema:\n    return CatalogItemSchema(\n        code=str(item.code),\n        shape=str(item.shape),\n        dimensions=str(item.dimensions),\n        images=item.shape_info.img_url if item.shape_info else None,\n        name_bond=str(item.name_bond),\n        grid_size=str(item.grid_size),\n        is_in_cart=is_in_cart,\n    )",
        "detail": "utils.catalog_helpers",
        "documentation": {}
    },
    {
        "label": "make_cache_key",
        "kind": 2,
        "importPath": "utils.catalog_helpers",
        "description": "utils.catalog_helpers",
        "peekOfCode": "def make_cache_key(params: CatalogQuerySchema, user_id: int):\n    raw_key = (\n        f\"{params.page}:\"\n        f\"{params.items_per_page}:\"\n        f\"code_{params.search_code or ''}:\"\n        f\"shape_{params.search_shape or ''}:\"\n        f\"dimensions_{params.search_dimensions or ''}:\"\n        f\"machine_{params.search_machine or ''}:\"\n        f\"bond_{params.name_bond or ''}:\"\n        f\"grid_{params.grid_size or ''}:\"",
        "detail": "utils.catalog_helpers",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(title=\"Search App API\")\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\nlimiter = Limiter(key_func=get_remote_address)\napp.state.limiter = limiter",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "limiter",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "limiter = Limiter(key_func=get_remote_address)\napp.state.limiter = limiter\nif os.path.exists(\"images\"):\n    app.mount(\"/images\", StaticFiles(directory=\"images\"), name=\"images\")\napp.include_router(auth.router)\napp.include_router(users.router)\napp.include_router(catalog.router)\napp.include_router(cart.router)\napp.include_router(blog.router)\napp.include_router(media.router)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app.state.limiter",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app.state.limiter = limiter\nif os.path.exists(\"images\"):\n    app.mount(\"/images\", StaticFiles(directory=\"images\"), name=\"images\")\napp.include_router(auth.router)\napp.include_router(users.router)\napp.include_router(catalog.router)\napp.include_router(cart.router)\napp.include_router(blog.router)\napp.include_router(media.router)\napp.include_router(menu.router)",
        "detail": "main",
        "documentation": {}
    }
]