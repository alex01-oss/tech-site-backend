"""Add session management fields to RefreshToken

Revision ID: f58eb46f74ac
Revises: 6dc2aaaf4ef3
Create Date: 2025-07-31 16:02:56.616286

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import uuid # <-- ДОДАЙ ЦЕЙ ІМПОРТ
from datetime import datetime, timedelta, UTC # <-- ДОДАЙ ЦІ ІМПОРТИ


# revision identifiers, used by Alembic.
revision: str = 'f58eb46f74ac'
down_revision: Union[str, None] = '6dc2aaaf4ef3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # КРОК 1: Додаємо всі нові стовпці як NULLABLE (тимчасово)
    op.add_column('refresh_tokens', sa.Column('jti', sa.String(), nullable=True))
    op.add_column('refresh_tokens', sa.Column('expires_at', sa.DateTime(), nullable=True))
    op.add_column('refresh_tokens', sa.Column('last_used_at', sa.DateTime(), nullable=True))
    op.add_column('refresh_tokens', sa.Column('is_revoked', sa.Boolean(), nullable=True))
    op.add_column('refresh_tokens', sa.Column('device_info', sa.String(), nullable=True))
    op.add_column('refresh_tokens', sa.Column('ip_address', sa.String(), nullable=True))

    # КРОК 2: Оновлюємо існуючі записи, щоб надати їм значення за замовчуванням
    op.execute(
        f"UPDATE refresh_tokens SET "
        f"jti = uuid_generate_v4(), " # Використовуйте uuid_generate_v4() для PostgreSQL
        f"expires_at = '{datetime.now(UTC) + timedelta(days=365)}', "
        f"last_used_at = created_at, "
        f"is_revoked = FALSE "
        f"WHERE jti IS NULL"
    )

    # КРОК 3: Змінюємо стовпці на NOT NULL після оновлення
    op.alter_column('refresh_tokens', 'jti',
                    existing_type=sa.String(),
                    nullable=False)
    op.alter_column('refresh_tokens', 'expires_at',
                    existing_type=sa.DateTime(),
                    nullable=False)
    op.alter_column('refresh_tokens', 'last_used_at',
                    existing_type=sa.DateTime(),
                    nullable=False)
    op.alter_column('refresh_tokens', 'is_revoked',
                    existing_type=sa.Boolean(),
                    nullable=False)

    # ### commands auto generated by Alembic - please adjust! ###
    # Створюємо тільки НОВИЙ індекс для JTI.
    # Індекси для `id` (primary key) та `refresh_token` вже існують.
    op.create_index(op.f('ix_refresh_tokens_jti'), 'refresh_tokens', ['jti'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Відкочуємо тільки індекс для JTI
    op.drop_index(op.f('ix_refresh_tokens_jti'), table_name='refresh_tokens')

    # Потім відкочуємо стовпці
    op.drop_column('refresh_tokens', 'ip_address')
    op.drop_column('refresh_tokens', 'device_info')
    op.drop_column('refresh_tokens', 'is_revoked')
    op.drop_column('refresh_tokens', 'last_used_at')
    op.drop_column('refresh_tokens', 'expires_at')
    op.drop_column('refresh_tokens', 'jti')
    # ### end Alembic commands ###