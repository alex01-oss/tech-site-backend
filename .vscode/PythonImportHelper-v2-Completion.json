[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "distinct",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.core.database",
        "description": "app.core.database",
        "isExtraImport": true,
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "Bond",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "BondToCode",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Catalog",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Categories",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "EquipmentCode",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "EquipmentModel",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "GridSize",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mounting",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Producer",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Shape",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "EquipmentModel",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "EquipmentCode",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Catalog",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Producer",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Shape",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Catalog",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Catalog",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "EquipmentCode",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "BondToCode",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Bond",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "GridSize",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Mounting",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Cookie",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Cookie",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "selectinload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "isExtraImport": true,
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "issue_tokens",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "decode_token",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "get_current_user_optional",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "cleanup_expired_tokens",
        "importPath": "app.core.security",
        "description": "app.core.security",
        "isExtraImport": true,
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "LoginRequest",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "RegisterRequest",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "RefreshTokenRequest",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "LogoutRequest",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserData",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserData",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UpdateUserRequest",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserData",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "MessageResponse",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "apply_catalog_filters",
        "importPath": "app.utils.apply_catalog_filters",
        "description": "app.utils.apply_catalog_filters",
        "isExtraImport": true,
        "detail": "app.utils.apply_catalog_filters",
        "documentation": {}
    },
    {
        "label": "apply_catalog_filters",
        "importPath": "app.utils.apply_catalog_filters",
        "description": "app.utils.apply_catalog_filters",
        "isExtraImport": true,
        "detail": "app.utils.apply_catalog_filters",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "UTC",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "UTC",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "UTC",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "app.models.post",
        "description": "app.models.post",
        "isExtraImport": true,
        "detail": "app.models.post",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "CreatePostRequest",
        "importPath": "app.schemas.post_schema",
        "description": "app.schemas.post_schema",
        "isExtraImport": true,
        "detail": "app.schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "DeletePostResponse",
        "importPath": "app.schemas.post_schema",
        "description": "app.schemas.post_schema",
        "isExtraImport": true,
        "detail": "app.schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "EditPostRequest",
        "importPath": "app.schemas.post_schema",
        "description": "app.schemas.post_schema",
        "isExtraImport": true,
        "detail": "app.schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "PostResponse",
        "importPath": "app.schemas.post_schema",
        "description": "app.schemas.post_schema",
        "isExtraImport": true,
        "detail": "app.schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "ImageUploadResponse",
        "importPath": "app.schemas.post_schema",
        "description": "app.schemas.post_schema",
        "isExtraImport": true,
        "detail": "app.schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "cache_get",
        "importPath": "app.utils.cache",
        "description": "app.utils.cache",
        "isExtraImport": true,
        "detail": "app.utils.cache",
        "documentation": {}
    },
    {
        "label": "cache_set",
        "importPath": "app.utils.cache",
        "description": "app.utils.cache",
        "isExtraImport": true,
        "detail": "app.utils.cache",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "importPath": "app.utils.cache",
        "description": "app.utils.cache",
        "isExtraImport": true,
        "detail": "app.utils.cache",
        "documentation": {}
    },
    {
        "label": "cache_get",
        "importPath": "app.utils.cache",
        "description": "app.utils.cache",
        "isExtraImport": true,
        "detail": "app.utils.cache",
        "documentation": {}
    },
    {
        "label": "cache_set",
        "importPath": "app.utils.cache",
        "description": "app.utils.cache",
        "isExtraImport": true,
        "detail": "app.utils.cache",
        "documentation": {}
    },
    {
        "label": "sanitize_html",
        "importPath": "app.utils.sanitize_html",
        "description": "app.utils.sanitize_html",
        "isExtraImport": true,
        "detail": "app.utils.sanitize_html",
        "documentation": {}
    },
    {
        "label": "BondToCode",
        "importPath": "app.models.bond_to_code",
        "description": "app.models.bond_to_code",
        "isExtraImport": true,
        "detail": "app.models.bond_to_code",
        "documentation": {}
    },
    {
        "label": "BondToCode",
        "importPath": "app.models.bond_to_code",
        "description": "app.models.bond_to_code",
        "isExtraImport": true,
        "detail": "app.models.bond_to_code",
        "documentation": {}
    },
    {
        "label": "BondToCode",
        "importPath": "app.models.bond_to_code",
        "description": "app.models.bond_to_code",
        "isExtraImport": true,
        "detail": "app.models.bond_to_code",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "app.models.cart_item",
        "description": "app.models.cart_item",
        "isExtraImport": true,
        "detail": "app.models.cart_item",
        "documentation": {}
    },
    {
        "label": "CartListResponse",
        "importPath": "app.schemas.cart_schema",
        "description": "app.schemas.cart_schema",
        "isExtraImport": true,
        "detail": "app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "CartRequest",
        "importPath": "app.schemas.cart_schema",
        "description": "app.schemas.cart_schema",
        "isExtraImport": true,
        "detail": "app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "CartResponse",
        "importPath": "app.schemas.cart_schema",
        "description": "app.schemas.cart_schema",
        "isExtraImport": true,
        "detail": "app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "GetCartResponse",
        "importPath": "app.schemas.cart_schema",
        "description": "app.schemas.cart_schema",
        "isExtraImport": true,
        "detail": "app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.schemas.cart_schema",
        "description": "app.schemas.cart_schema",
        "isExtraImport": true,
        "detail": "app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "CatalogItemSchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "MountingSchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogQuerySchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogResponseSchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogItemDetailedSchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "EquipmentModelSchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "BondSchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogItemSchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "MountingSchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogItemSchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogItemSchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogQuerySchema",
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "isExtraImport": true,
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "EquipmentModel",
        "importPath": "app.models.equipment_model",
        "description": "app.models.equipment_model",
        "isExtraImport": true,
        "detail": "app.models.equipment_model",
        "documentation": {}
    },
    {
        "label": "EquipmentModel",
        "importPath": "app.models.equipment_model",
        "description": "app.models.equipment_model",
        "isExtraImport": true,
        "detail": "app.models.equipment_model",
        "documentation": {}
    },
    {
        "label": "make_cache_key",
        "importPath": "app.utils.catalog_helpers",
        "description": "app.utils.catalog_helpers",
        "isExtraImport": true,
        "detail": "app.utils.catalog_helpers",
        "documentation": {}
    },
    {
        "label": "parse_query_params",
        "importPath": "app.utils.catalog_helpers",
        "description": "app.utils.catalog_helpers",
        "isExtraImport": true,
        "detail": "app.utils.catalog_helpers",
        "documentation": {}
    },
    {
        "label": "Catalog",
        "importPath": "app.models.catalog",
        "description": "app.models.catalog",
        "isExtraImport": true,
        "detail": "app.models.catalog",
        "documentation": {}
    },
    {
        "label": "Catalog",
        "importPath": "app.models.catalog",
        "description": "app.models.catalog",
        "isExtraImport": true,
        "detail": "app.models.catalog",
        "documentation": {}
    },
    {
        "label": "CategorySchema",
        "importPath": "app.schemas.data_schema",
        "description": "app.schemas.data_schema",
        "isExtraImport": true,
        "detail": "app.schemas.data_schema",
        "documentation": {}
    },
    {
        "label": "FilterResponseSchema",
        "importPath": "app.schemas.data_schema",
        "description": "app.schemas.data_schema",
        "isExtraImport": true,
        "detail": "app.schemas.data_schema",
        "documentation": {}
    },
    {
        "label": "Categories",
        "importPath": "app.models.categories",
        "description": "app.models.categories",
        "isExtraImport": true,
        "detail": "app.models.categories",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.settings",
        "description": "app.core.settings",
        "isExtraImport": true,
        "detail": "app.core.settings",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.settings",
        "description": "app.core.settings",
        "isExtraImport": true,
        "detail": "app.core.settings",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.settings",
        "description": "app.core.settings",
        "isExtraImport": true,
        "detail": "app.core.settings",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "ExpiredSignatureError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTClaimsError",
        "importPath": "jose.exceptions",
        "description": "jose.exceptions",
        "isExtraImport": true,
        "detail": "jose.exceptions",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic.v1",
        "description": "pydantic.v1",
        "isExtraImport": true,
        "detail": "pydantic.v1",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BackgroundScheduler",
        "importPath": "apscheduler.schedulers.background",
        "description": "apscheduler.schedulers.background",
        "isExtraImport": true,
        "detail": "apscheduler.schedulers.background",
        "documentation": {}
    },
    {
        "label": "IntervalTrigger",
        "importPath": "apscheduler.triggers.interval",
        "description": "apscheduler.triggers.interval",
        "isExtraImport": true,
        "detail": "apscheduler.triggers.interval",
        "documentation": {}
    },
    {
        "label": "EquipmentCode",
        "importPath": "app.models.equipment_code",
        "description": "app.models.equipment_code",
        "isExtraImport": true,
        "detail": "app.models.equipment_code",
        "documentation": {}
    },
    {
        "label": "Shape",
        "importPath": "app.models.shape",
        "description": "app.models.shape",
        "isExtraImport": true,
        "detail": "app.models.shape",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "isExtraImport": true,
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "bleach",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bleach",
        "description": "bleach",
        "detail": "bleach",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "Limiter",
        "importPath": "slowapi",
        "description": "slowapi",
        "isExtraImport": true,
        "detail": "slowapi",
        "documentation": {}
    },
    {
        "label": "get_remote_address",
        "importPath": "slowapi.util",
        "description": "slowapi.util",
        "isExtraImport": true,
        "detail": "slowapi.util",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "starlette.staticfiles",
        "description": "starlette.staticfiles",
        "isExtraImport": true,
        "detail": "starlette.staticfiles",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "users",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "catalog",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "cart",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "blog",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "media",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "autocomplete",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "data",
        "importPath": "app.api.routes",
        "description": "app.api.routes",
        "isExtraImport": true,
        "detail": "app.api.routes",
        "documentation": {}
    },
    {
        "label": "start_scheduler",
        "importPath": "app.tasks.scheduler",
        "description": "app.tasks.scheduler",
        "isExtraImport": true,
        "detail": "app.tasks.scheduler",
        "documentation": {}
    },
    {
        "label": "stop_scheduler",
        "importPath": "app.tasks.scheduler",
        "description": "app.tasks.scheduler",
        "isExtraImport": true,
        "detail": "app.tasks.scheduler",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "winreg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winreg",
        "description": "winreg",
        "detail": "winreg",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.0a345af0ce12_add_new_tables",
        "description": "alembic.versions.0a345af0ce12_add_new_tables",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('users',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('role', sa.String(), nullable=False),\n    sa.Column('full_name', sa.String(), nullable=False),\n    sa.Column('email', sa.String(), nullable=False),\n    sa.Column('phone', sa.String(), nullable=False),\n    sa.Column('password_hash', sa.String(), nullable=False),",
        "detail": "alembic.versions.0a345af0ce12_add_new_tables",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.0a345af0ce12_add_new_tables",
        "description": "alembic.versions.0a345af0ce12_add_new_tables",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_unique_constraint(op.f('shape_unique'), 'shape_img', ['shape'], postgresql_nulls_not_distinct=False)\n    op.alter_column('shape_img', 'img_url',\n               existing_type=sa.VARCHAR(length=255),\n               nullable=True)\n    op.alter_column('shape_img', 'shape',\n               existing_type=sa.String(length=255),\n               type_=sa.VARCHAR(length=12),",
        "detail": "alembic.versions.0a345af0ce12_add_new_tables",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.0ce5fb080f0d_add_back_populates_to_mounting",
        "description": "alembic.versions.0ce5fb080f0d_add_back_populates_to_mounting",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.0ce5fb080f0d_add_back_populates_to_mounting",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.0ce5fb080f0d_add_back_populates_to_mounting",
        "description": "alembic.versions.0ce5fb080f0d_add_back_populates_to_mounting",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.0ce5fb080f0d_add_back_populates_to_mounting",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.671b89317917_add_back_populates_to_cart_item",
        "description": "alembic.versions.671b89317917_add_back_populates_to_cart_item",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.671b89317917_add_back_populates_to_cart_item",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.671b89317917_add_back_populates_to_cart_item",
        "description": "alembic.versions.671b89317917_add_back_populates_to_cart_item",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.671b89317917_add_back_populates_to_cart_item",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.768c5925876e_add_back_populates_to_categories",
        "description": "alembic.versions.768c5925876e_add_back_populates_to_categories",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.768c5925876e_add_back_populates_to_categories",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.768c5925876e_add_back_populates_to_categories",
        "description": "alembic.versions.768c5925876e_add_back_populates_to_categories",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.768c5925876e_add_back_populates_to_categories",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.869cba31f154_initial_schema_from_backup",
        "description": "alembic.versions.869cba31f154_initial_schema_from_backup",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    pass\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    pass",
        "detail": "alembic.versions.869cba31f154_initial_schema_from_backup",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.869cba31f154_initial_schema_from_backup",
        "description": "alembic.versions.869cba31f154_initial_schema_from_backup",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    pass",
        "detail": "alembic.versions.869cba31f154_initial_schema_from_backup",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.b7d95a0a34a2_add_img_to_categories",
        "description": "alembic.versions.b7d95a0a34a2_add_img_to_categories",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column('categories', 'img_url',\n               existing_type=sa.VARCHAR(length=255),\n               nullable=False)\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "alembic.versions.b7d95a0a34a2_add_img_to_categories",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.b7d95a0a34a2_add_img_to_categories",
        "description": "alembic.versions.b7d95a0a34a2_add_img_to_categories",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column('categories', 'img_url',\n               existing_type=sa.VARCHAR(length=255),\n               nullable=True)\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.b7d95a0a34a2_add_img_to_categories",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.c8ff1db30cd9_add_back_populates_to_grid_size",
        "description": "alembic.versions.c8ff1db30cd9_add_back_populates_to_grid_size",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.c8ff1db30cd9_add_back_populates_to_grid_size",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.c8ff1db30cd9_add_back_populates_to_grid_size",
        "description": "alembic.versions.c8ff1db30cd9_add_back_populates_to_grid_size",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.c8ff1db30cd9_add_back_populates_to_grid_size",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\nfrom app.core.database import Base\nfrom app.models import Bond, BondToCode, CartItem, Catalog, Categories, EquipmentCode, EquipmentModel, GridSize, Mounting, Post, Producer, RefreshToken, Shape, User\ntarget_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.api.routes.auth",
        "description": "app.api.routes.auth",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter(\n    prefix=\"/api/auth\",\n    tags=[\"Authorization\"]\n)\n@router.post(\"/login\", response_model=TokenResponse)\nasync def login(\n        user_data: LoginRequest,\n        response: Response,\n        request: Request,",
        "detail": "app.api.routes.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.routes.auth",
        "description": "app.api.routes.auth",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/auth\",\n    tags=[\"Authorization\"]\n)\n@router.post(\"/login\", response_model=TokenResponse)\nasync def login(\n        user_data: LoginRequest,\n        response: Response,\n        request: Request,\n        db: Session = Depends(get_db),",
        "detail": "app.api.routes.auth",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.api.routes.autocomplete",
        "description": "app.api.routes.autocomplete",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter(\n    prefix='/api/autocomplete',\n    tags=['Autocomplete']\n)\n@router.get('/code', response_model=List[str])\nasync def autocomplete_code(\n        q: str = Query(\n            ...,\n            min_length=1,",
        "detail": "app.api.routes.autocomplete",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.routes.autocomplete",
        "description": "app.api.routes.autocomplete",
        "peekOfCode": "router = APIRouter(\n    prefix='/api/autocomplete',\n    tags=['Autocomplete']\n)\n@router.get('/code', response_model=List[str])\nasync def autocomplete_code(\n        q: str = Query(\n            ...,\n            min_length=1,\n            max_length=5,",
        "detail": "app.api.routes.autocomplete",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.api.routes.blog",
        "description": "app.api.routes.blog",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter(\n    prefix=\"/api/blog\",\n    tags=[\"Blog\"]\n)\n@router.post(\"\", response_model=PostResponse)\nasync def create_post(\n        data: CreatePostRequest,\n        db: Session = Depends(get_db),\n        user: UserData = Depends(admin_required)",
        "detail": "app.api.routes.blog",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.routes.blog",
        "description": "app.api.routes.blog",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/blog\",\n    tags=[\"Blog\"]\n)\n@router.post(\"\", response_model=PostResponse)\nasync def create_post(\n        data: CreatePostRequest,\n        db: Session = Depends(get_db),\n        user: UserData = Depends(admin_required)\n):",
        "detail": "app.api.routes.blog",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.api.routes.cart",
        "description": "app.api.routes.cart",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter(\n    prefix=\"/api/cart\",\n    tags=[\"Cart\"]\n)\n@router.get(\"\", response_model=CartListResponse)\nasync def get_cart(\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_user)\n):",
        "detail": "app.api.routes.cart",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.routes.cart",
        "description": "app.api.routes.cart",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/cart\",\n    tags=[\"Cart\"]\n)\n@router.get(\"\", response_model=CartListResponse)\nasync def get_cart(\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_user)\n):\n    logger.info(f\"Fetching cart for user: {user.id}\")",
        "detail": "app.api.routes.cart",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.api.routes.catalog",
        "description": "app.api.routes.catalog",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter(\n    prefix=\"/api/catalog\",\n    tags=[\"Catalog\"]\n)\n@router.get(\"\", response_model=CatalogResponseSchema, response_model_exclude_none=True)\nasync def get_catalog_items(\n        query_params: CatalogQuerySchema = Depends(parse_query_params),\n        db: Session = Depends(get_db),\n        user: Optional[User] = Depends(get_current_user_optional)",
        "detail": "app.api.routes.catalog",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.routes.catalog",
        "description": "app.api.routes.catalog",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/catalog\",\n    tags=[\"Catalog\"]\n)\n@router.get(\"\", response_model=CatalogResponseSchema, response_model_exclude_none=True)\nasync def get_catalog_items(\n        query_params: CatalogQuerySchema = Depends(parse_query_params),\n        db: Session = Depends(get_db),\n        user: Optional[User] = Depends(get_current_user_optional)\n):",
        "detail": "app.api.routes.catalog",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.routes.data",
        "description": "app.api.routes.data",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api\",\n    tags=[\"Products\"]\n)\n@router.get(\"/filters\", response_model=FilterResponseSchema, response_model_exclude_none=True)\nasync def get_sidebar_filters(\n        db: Session = Depends(get_db),\n        category_id: Optional[int] = Query(None)\n):\n    bond_query = db.query(Bond).join(BondToCode, Bond.id == BondToCode.bond_id).join(Catalog, Catalog.id == BondToCode.code_id)",
        "detail": "app.api.routes.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.api.routes.media",
        "description": "app.api.routes.media",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter(\n    prefix=\"/api/images\",\n    tags=[\"Media\"]\n)\n@router.get(\"/{filename}\")\nasync def serve_image(filename: str):\n    if \"..\" in filename or filename.startswith(\"/\") or filename.startswith(\"\\\\\"):\n        logger.warning(f\"Attempted path traversal attack with filename: {filename}\")\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Invalid filename\")",
        "detail": "app.api.routes.media",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.routes.media",
        "description": "app.api.routes.media",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/images\",\n    tags=[\"Media\"]\n)\n@router.get(\"/{filename}\")\nasync def serve_image(filename: str):\n    if \"..\" in filename or filename.startswith(\"/\") or filename.startswith(\"\\\\\"):\n        logger.warning(f\"Attempted path traversal attack with filename: {filename}\")\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Invalid filename\")\n    file_path = os.path.join(\"app/static/images\", filename)",
        "detail": "app.api.routes.media",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.api.routes.users",
        "description": "app.api.routes.users",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter(\n    prefix=\"/api/user\",\n    tags=[\"User\"]\n)\n@router.get(\"\", response_model=UserResponse)\nasync def get_user(\n        user: User = Depends(get_current_user),\n):\n    logger.info(f\"User profile requested for user_id: {user.id}\")",
        "detail": "app.api.routes.users",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.routes.users",
        "description": "app.api.routes.users",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/user\",\n    tags=[\"User\"]\n)\n@router.get(\"\", response_model=UserResponse)\nasync def get_user(\n        user: User = Depends(get_current_user),\n):\n    logger.info(f\"User profile requested for user_id: {user.id}\")\n    return UserResponse(user=UserData.model_validate(user))",
        "detail": "app.api.routes.users",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.api.dependencies",
        "description": "app.api.dependencies",
        "peekOfCode": "def get_db() -> Generator:\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        try:\n            db.close()\n        except Exception as e:\n            logging.error(f\"Error while closing DB session: {e}\")\n            raise",
        "detail": "app.api.dependencies",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "app.core.database",
        "description": "app.core.database",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass",
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "app.core.database",
        "description": "app.core.database",
        "peekOfCode": "DATABASE_URL = settings.SQLALCHEMY_DATABASE_URI\nif not DATABASE_URL:\n    raise ValueError(\"DATABASE_URL is not set\")\nengine = create_engine(\n    DATABASE_URL,\n    pool_size=20,\n    max_overflow=30,\n    pool_recycle=3600,\n    pool_pre_ping=True\n)",
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.core.database",
        "description": "app.core.database",
        "peekOfCode": "engine = create_engine(\n    DATABASE_URL,\n    pool_size=20,\n    max_overflow=30,\n    pool_recycle=3600,\n    pool_pre_ping=True\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nclass Base(DeclarativeBase):\n    pass",
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.core.database",
        "description": "app.core.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nclass Base(DeclarativeBase):\n    pass",
        "detail": "app.core.database",
        "documentation": {}
    },
    {
        "label": "log_dir",
        "kind": 5,
        "importPath": "app.core.logger",
        "description": "app.core.logger",
        "peekOfCode": "log_dir = Path(\"logs\")\nlog_dir.mkdir(exist_ok=True)\nlogger = logging.getLogger(\"app\")\nlogger.setLevel(logging.INFO)\nconsole_handler = logging.StreamHandler(sys.stdout)\nconsole_handler.setLevel(logging.INFO)\nconsole_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nconsole_handler.setFormatter(console_format)\nfile_handler = logging.FileHandler(log_dir / \"app.log\")\nfile_handler.setLevel(logging.INFO)",
        "detail": "app.core.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.core.logger",
        "description": "app.core.logger",
        "peekOfCode": "logger = logging.getLogger(\"app\")\nlogger.setLevel(logging.INFO)\nconsole_handler = logging.StreamHandler(sys.stdout)\nconsole_handler.setLevel(logging.INFO)\nconsole_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nconsole_handler.setFormatter(console_format)\nfile_handler = logging.FileHandler(log_dir / \"app.log\")\nfile_handler.setLevel(logging.INFO)\nfile_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfile_handler.setFormatter(file_format)",
        "detail": "app.core.logger",
        "documentation": {}
    },
    {
        "label": "console_handler",
        "kind": 5,
        "importPath": "app.core.logger",
        "description": "app.core.logger",
        "peekOfCode": "console_handler = logging.StreamHandler(sys.stdout)\nconsole_handler.setLevel(logging.INFO)\nconsole_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nconsole_handler.setFormatter(console_format)\nfile_handler = logging.FileHandler(log_dir / \"app.log\")\nfile_handler.setLevel(logging.INFO)\nfile_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfile_handler.setFormatter(file_format)\nlogger.addHandler(console_handler)\nlogger.addHandler(file_handler)",
        "detail": "app.core.logger",
        "documentation": {}
    },
    {
        "label": "console_format",
        "kind": 5,
        "importPath": "app.core.logger",
        "description": "app.core.logger",
        "peekOfCode": "console_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nconsole_handler.setFormatter(console_format)\nfile_handler = logging.FileHandler(log_dir / \"app.log\")\nfile_handler.setLevel(logging.INFO)\nfile_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfile_handler.setFormatter(file_format)\nlogger.addHandler(console_handler)\nlogger.addHandler(file_handler)",
        "detail": "app.core.logger",
        "documentation": {}
    },
    {
        "label": "file_handler",
        "kind": 5,
        "importPath": "app.core.logger",
        "description": "app.core.logger",
        "peekOfCode": "file_handler = logging.FileHandler(log_dir / \"app.log\")\nfile_handler.setLevel(logging.INFO)\nfile_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfile_handler.setFormatter(file_format)\nlogger.addHandler(console_handler)\nlogger.addHandler(file_handler)",
        "detail": "app.core.logger",
        "documentation": {}
    },
    {
        "label": "file_format",
        "kind": 5,
        "importPath": "app.core.logger",
        "description": "app.core.logger",
        "peekOfCode": "file_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfile_handler.setFormatter(file_format)\nlogger.addHandler(console_handler)\nlogger.addHandler(file_handler)",
        "detail": "app.core.logger",
        "documentation": {}
    },
    {
        "label": "set_auth_cookies",
        "kind": 2,
        "importPath": "app.core.security",
        "description": "app.core.security",
        "peekOfCode": "def set_auth_cookies(response: Response, tokens: dict):\n    response.set_cookie(\n        key=\"access_token\",\n        value=f\"Bearer {tokens['access_token']}\",\n        httponly=True,\n        secure=settings.HTTPS_ENABLED,\n        samesite=\"lax\",\n        max_age=settings.ACCESS_TOKEN_EXPIRE_MINUTES * 60,\n    )\n    response.set_cookie(",
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "delete_auth_cookies",
        "kind": 2,
        "importPath": "app.core.security",
        "description": "app.core.security",
        "peekOfCode": "def delete_auth_cookies(response: Response):\n    response.delete_cookie(\n        key=\"access_token\",\n        secure=settings.HTTPS_ENABLED,\n        httponly=True,\n        samesite=\"lax\",\n    )\n    response.delete_cookie(\n        key=\"refresh_token\",\n        secure=settings.HTTPS_ENABLED,",
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "app.core.security",
        "description": "app.core.security",
        "peekOfCode": "def hash_password(password) -> str:\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef create_access_token(identity: Union[str, int]) -> str:\n    expire = datetime.now(UTC) + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode = {\n        \"sub\": str(identity),\n        \"exp\": expire,\n        \"type\": \"access\"",
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "app.core.security",
        "description": "app.core.security",
        "peekOfCode": "def verify_password(plain_password, hashed_password) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\ndef create_access_token(identity: Union[str, int]) -> str:\n    expire = datetime.now(UTC) + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode = {\n        \"sub\": str(identity),\n        \"exp\": expire,\n        \"type\": \"access\"\n    }\n    return jwt.encode(to_encode, settings.ACCESS_TOKEN_SECRET_KEY, algorithm=settings.ALGORITHM)",
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "app.core.security",
        "description": "app.core.security",
        "peekOfCode": "def create_access_token(identity: Union[str, int]) -> str:\n    expire = datetime.now(UTC) + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode = {\n        \"sub\": str(identity),\n        \"exp\": expire,\n        \"type\": \"access\"\n    }\n    return jwt.encode(to_encode, settings.ACCESS_TOKEN_SECRET_KEY, algorithm=settings.ALGORITHM)\ndef create_refresh_token(identity: Union[str, int], db: Session, request: Request) -> str:\n    jti = str(uuid.uuid4())",
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "kind": 2,
        "importPath": "app.core.security",
        "description": "app.core.security",
        "peekOfCode": "def create_refresh_token(identity: Union[str, int], db: Session, request: Request) -> str:\n    jti = str(uuid.uuid4())\n    expire_at = datetime.now(UTC) + timedelta(minutes=settings.REFRESH_TOKEN_EXPIRE_MINUTES)\n    to_encode = {\n        \"sub\": str(identity),\n        \"exp\": expire_at,\n        \"type\": \"refresh\",\n        \"jti\": jti,\n    }\n    encoded_jwt = jwt.encode(to_encode, settings.REFRESH_TOKEN_SECRET_KEY, algorithm=settings.ALGORITHM)",
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "decode_token",
        "kind": 2,
        "importPath": "app.core.security",
        "description": "app.core.security",
        "peekOfCode": "def decode_token(token: str) -> dict:\n    if not token:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Token is missing\")\n    if token.startswith(\"Bearer \"):\n        token = token[7:]\n    try:\n        unverified_payload = jwt.get_unverified_claims(token)\n        token_type = unverified_payload.get(\"type\")\n    except JWTError as e:\n        logger.error(f\"Could not decode token: {e}\", exc_info=True)",
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "get_token_from_request",
        "kind": 2,
        "importPath": "app.core.security",
        "description": "app.core.security",
        "peekOfCode": "def get_token_from_request(\n        authorization: Optional[str] = Header(None, alias=\"Authorization\"),\n        access_token_cookie: Optional[str] = Cookie(None, alias=\"access_token\")\n) -> Optional[str]:\n    token = None\n    if authorization:\n        token = authorization[7:] if authorization.startswith(\"Bearer \") else authorization\n    elif access_token_cookie:\n        token = access_token_cookie[7:] if access_token_cookie.startswith(\"Bearer \") else access_token_cookie\n    return token",
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "app.core.security",
        "description": "app.core.security",
        "peekOfCode": "def get_current_user(\n        db: Session = Depends(get_db),\n        token: str = Depends(get_token_from_request),\n) -> User:\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    if not token:",
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "get_current_user_optional",
        "kind": 2,
        "importPath": "app.core.security",
        "description": "app.core.security",
        "peekOfCode": "def get_current_user_optional(\n        db: Session = Depends(get_db),\n        token: str = Depends(get_token_from_request)\n) -> Optional[User]:\n    if not token:\n        return None\n    try:\n        payload = decode_token(token)\n        user_id = payload.get(\"sub\")\n        if not user_id or payload.get(\"type\") != \"access\":",
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "kind": 2,
        "importPath": "app.core.security",
        "description": "app.core.security",
        "peekOfCode": "def admin_required(user=Depends(get_current_user)) -> User:\n    if user.role != \"admin\":\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Admin access only\"\n        )\n    return user\ndef issue_tokens(user_id: int, db: Session, request: Request) -> dict:\n    access_token = create_access_token(user_id)\n    refresh_token = create_refresh_token(user_id, db, request)",
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "issue_tokens",
        "kind": 2,
        "importPath": "app.core.security",
        "description": "app.core.security",
        "peekOfCode": "def issue_tokens(user_id: int, db: Session, request: Request) -> dict:\n    access_token = create_access_token(user_id)\n    refresh_token = create_refresh_token(user_id, db, request)\n    return {\n        \"access_token\": access_token,\n        \"refresh_token\": refresh_token,\n        \"token_type\": \"bearer\"\n    }\ndef cleanup_expired_tokens(db: Session):\n    now = datetime.now(UTC)",
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "cleanup_expired_tokens",
        "kind": 2,
        "importPath": "app.core.security",
        "description": "app.core.security",
        "peekOfCode": "def cleanup_expired_tokens(db: Session):\n    now = datetime.now(UTC)\n    deleted_count = db.query(RefreshToken).filter(\n        RefreshToken.expires_at < now,\n    ).delete()\n    db.commit()\n    print(f\"DEBUG: Purging refresh tokens. Deleted {deleted_count} expired records.\")\n    return deleted_count",
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.core.security",
        "description": "app.core.security",
        "peekOfCode": "logger = logging.getLogger(__name__)\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"api/auth/login\")\ndef set_auth_cookies(response: Response, tokens: dict):\n    response.set_cookie(\n        key=\"access_token\",\n        value=f\"Bearer {tokens['access_token']}\",\n        httponly=True,\n        secure=settings.HTTPS_ENABLED,\n        samesite=\"lax\",",
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.core.security",
        "description": "app.core.security",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"api/auth/login\")\ndef set_auth_cookies(response: Response, tokens: dict):\n    response.set_cookie(\n        key=\"access_token\",\n        value=f\"Bearer {tokens['access_token']}\",\n        httponly=True,\n        secure=settings.HTTPS_ENABLED,\n        samesite=\"lax\",\n        max_age=settings.ACCESS_TOKEN_EXPIRE_MINUTES * 60,",
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "app.core.security",
        "description": "app.core.security",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"api/auth/login\")\ndef set_auth_cookies(response: Response, tokens: dict):\n    response.set_cookie(\n        key=\"access_token\",\n        value=f\"Bearer {tokens['access_token']}\",\n        httponly=True,\n        secure=settings.HTTPS_ENABLED,\n        samesite=\"lax\",\n        max_age=settings.ACCESS_TOKEN_EXPIRE_MINUTES * 60,\n    )",
        "detail": "app.core.security",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.core.settings",
        "description": "app.core.settings",
        "peekOfCode": "class Settings(BaseSettings):\n    SQLALCHEMY_DATABASE_URI: str = os.getenv('DATABASE_URL')\n    ITEMS_PER_PAGE: int = int(os.getenv('ITEMS_PER_PAGE'))\n    ACCESS_TOKEN_SECRET_KEY: str = os.getenv(\"SECRET_KEY\")\n    REFRESH_TOKEN_SECRET_KEY: str = os.getenv(\"SUPER_SECRET_KEY\")\n    ACCESS_TOKEN_EXPIRE_MINUTES=int(os.getenv('ACCESS_TOKEN_EXPIRE_MINUTES'))\n    REFRESH_TOKEN_EXPIRE_MINUTES=int(os.getenv('REFRESH_TOKEN_EXPIRE_MINUTES'))\n    ALGORITHM: str = os.getenv('ALGORITHM')\n    CACHE_TYPE: str = \"RedisCache\"\n    CACHE_REDIS_HOST: str = os.getenv(\"CACHE_REDIS_HOST\")",
        "detail": "app.core.settings",
        "documentation": {}
    },
    {
        "label": "strtobool",
        "kind": 2,
        "importPath": "app.core.settings",
        "description": "app.core.settings",
        "peekOfCode": "def strtobool(val: str) -> bool:\n    val = val.lower()\n    if val in (\"y\", \"yes\", \"t\", \"true\", \"on\", \"1\"):\n        return True\n    elif val in (\"n\", \"no\", \"f\", \"false\", \"off\", \"0\"):\n        return False\n    raise ValueError(f\"invalid truth value {val!r}\")\nclass Settings(BaseSettings):\n    SQLALCHEMY_DATABASE_URI: str = os.getenv('DATABASE_URL')\n    ITEMS_PER_PAGE: int = int(os.getenv('ITEMS_PER_PAGE'))",
        "detail": "app.core.settings",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.core.settings",
        "description": "app.core.settings",
        "peekOfCode": "settings = Settings()",
        "detail": "app.core.settings",
        "documentation": {}
    },
    {
        "label": "Bond",
        "kind": 6,
        "importPath": "app.models.bond",
        "description": "app.models.bond",
        "peekOfCode": "class Bond(Base):\n    __tablename__ = 'bond'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    name_bond: Mapped[str] = mapped_column(String(50))\n    bond_description: Mapped[str] = mapped_column(Text)\n    bond_cooling: Mapped[str] = mapped_column(Text)\n    bond_to_codes: Mapped[List[\"BondToCode\"]] = relationship(\n        \"BondToCode\", back_populates=\"bond\"\n    )",
        "detail": "app.models.bond",
        "documentation": {}
    },
    {
        "label": "BondToCode",
        "kind": 6,
        "importPath": "app.models.bond_to_code",
        "description": "app.models.bond_to_code",
        "peekOfCode": "class BondToCode(Base):\n    __tablename__ = 'bond_to_code'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    code_id: Mapped[int] = mapped_column(Integer, ForeignKey('catalog.id'))\n    bond_id: Mapped[int] = mapped_column(Integer, ForeignKey('bond.id'))\n    catalog: Mapped[\"Catalog\"] = relationship(\n        \"Catalog\", back_populates=\"bond_to_codes\"\n    )\n    bond: Mapped[\"Bond\"] = relationship(\n        \"Bond\", back_populates=\"bond_to_codes\"",
        "detail": "app.models.bond_to_code",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "kind": 6,
        "importPath": "app.models.cart_item",
        "description": "app.models.cart_item",
        "peekOfCode": "class CartItem(Base):\n    __tablename__ = 'cart_item'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    quantity: Mapped[int] = mapped_column(Integer, default=1)\n    user_id: Mapped[int] = mapped_column(ForeignKey('users.id', ondelete='CASCADE'), nullable=False)\n    product_id: Mapped[int] = mapped_column(ForeignKey('catalog.id'), nullable=False)\n    user: Mapped[\"User\"] = relationship(back_populates=\"cart_items\")\n    catalog: Mapped[\"Catalog\"] = relationship(back_populates=\"cart_items\")",
        "detail": "app.models.cart_item",
        "documentation": {}
    },
    {
        "label": "Catalog",
        "kind": 6,
        "importPath": "app.models.catalog",
        "description": "app.models.catalog",
        "peekOfCode": "class Catalog(Base):\n    __tablename__ = 'catalog'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    code: Mapped[str] = mapped_column(String(10))\n    dimensions: Mapped[str] = mapped_column(String(50))\n    shape_id: Mapped[int] = mapped_column(Integer, ForeignKey('shape_img.id'))\n    grid_size_id: Mapped[int] = mapped_column(Integer, ForeignKey('grid_size.id'))\n    category_id: Mapped[int] = mapped_column(Integer, ForeignKey('categories.id'))\n    mounting_id: Mapped[int] = mapped_column(Integer, ForeignKey('mounting.id'), nullable=True)\n    shape: Mapped[\"Shape\"] = relationship(\"Shape\", back_populates=\"catalog\")",
        "detail": "app.models.catalog",
        "documentation": {}
    },
    {
        "label": "Categories",
        "kind": 6,
        "importPath": "app.models.categories",
        "description": "app.models.categories",
        "peekOfCode": "class Categories(Base):\n    __tablename__ = 'categories'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    name: Mapped[str] = mapped_column(String(100))\n    img_url: Mapped[str] = mapped_column(String(255))\n    catalog: Mapped[List[\"Catalog\"]] = relationship(\n        \"Catalog\", back_populates=\"category\"\n    )",
        "detail": "app.models.categories",
        "documentation": {}
    },
    {
        "label": "EquipmentCode",
        "kind": 6,
        "importPath": "app.models.equipment_code",
        "description": "app.models.equipment_code",
        "peekOfCode": "class EquipmentCode(Base):\n    __tablename__ = 'equipment_code'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    equipment_model_id: Mapped[int] = mapped_column(Integer, ForeignKey('equipment_model.id'))\n    catalog_id: Mapped[int] = mapped_column(Integer, ForeignKey('catalog.id'))\n    equipment_model: Mapped[\"EquipmentModel\"] = relationship(\n        \"EquipmentModel\", back_populates=\"equipment_codes\"\n    )\n    catalog: Mapped[\"Catalog\"] = relationship(\n        \"Catalog\", back_populates=\"equipment_codes\"",
        "detail": "app.models.equipment_code",
        "documentation": {}
    },
    {
        "label": "EquipmentModel",
        "kind": 6,
        "importPath": "app.models.equipment_model",
        "description": "app.models.equipment_model",
        "peekOfCode": "class EquipmentModel(Base):\n    __tablename__ = 'equipment_model'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    model: Mapped[str] = mapped_column(String(50))\n    producer_id: Mapped[int] = mapped_column(Integer, ForeignKey('producer_name.id'))\n    producer: Mapped[\"Producer\"] = relationship(\n        \"Producer\", back_populates=\"equipment_models\"\n    )\n    equipment_codes: Mapped[List[\"EquipmentCode\"]] = relationship(\n        \"EquipmentCode\", back_populates=\"equipment_model\"",
        "detail": "app.models.equipment_model",
        "documentation": {}
    },
    {
        "label": "GridSize",
        "kind": 6,
        "importPath": "app.models.grid_size",
        "description": "app.models.grid_size",
        "peekOfCode": "class GridSize(Base):\n    __tablename__ = 'grid_size'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    grid_size: Mapped[str] = mapped_column(String(50))\n    catalog: Mapped[List[\"Catalog\"]] = relationship(\n        \"Catalog\", back_populates=\"grid_size\"\n    )",
        "detail": "app.models.grid_size",
        "documentation": {}
    },
    {
        "label": "Mounting",
        "kind": 6,
        "importPath": "app.models.mounting",
        "description": "app.models.mounting",
        "peekOfCode": "class Mounting(Base):\n    __tablename__ = 'mounting'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    mm: Mapped[str] = mapped_column(String(10))\n    inch: Mapped[str] = mapped_column(String(10))\n    catalog: Mapped[List[\"Catalog\"]] = relationship(\n        \"Catalog\", back_populates=\"mounting\"\n    )",
        "detail": "app.models.mounting",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.models.post",
        "description": "app.models.post",
        "peekOfCode": "class Post(Base):\n    __tablename__ = \"posts\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"users.id\", ondelete='CASCADE'), nullable=False)\n    title: Mapped[str] = mapped_column(String, nullable=False)\n    content: Mapped[str] = mapped_column(String, nullable=False)\n    image: Mapped[Optional[str]] = mapped_column(String, nullable=True)\n    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), server_default=func.now(), nullable=False)\n    updated_at: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True), onupdate=func.now())\n    user: Mapped[\"User\"] = relationship(back_populates=\"posts\")",
        "detail": "app.models.post",
        "documentation": {}
    },
    {
        "label": "Producer",
        "kind": 6,
        "importPath": "app.models.producer",
        "description": "app.models.producer",
        "peekOfCode": "class Producer(Base):\n    __tablename__ = 'producer_name'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    name_producer: Mapped[str] = mapped_column(String(50))\n    equipment_models: Mapped[List[\"EquipmentModel\"]] = relationship(\n        \"EquipmentModel\", back_populates=\"producer\"\n    )",
        "detail": "app.models.producer",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "kind": 6,
        "importPath": "app.models.refresh_token",
        "description": "app.models.refresh_token",
        "peekOfCode": "class RefreshToken(Base):\n    __tablename__ = 'refresh_tokens'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)\n    user_id: Mapped[int] = mapped_column(ForeignKey('users.id', ondelete='CASCADE'), nullable=False)\n    jti: Mapped[str] = mapped_column(String, unique=True, index=True, nullable=False)\n    refresh_token: Mapped[str] = mapped_column(String, nullable=False, index=True)\n    created_at: Mapped[datetime] = mapped_column(DateTime, server_default=func.now(), nullable=False)\n    expires_at: Mapped[datetime] = mapped_column(DateTime, nullable=False)\n    last_used_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now(UTC), onupdate=datetime.now(UTC), nullable=False)\n    is_revoked: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False)",
        "detail": "app.models.refresh_token",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "app.models.shape",
        "description": "app.models.shape",
        "peekOfCode": "class Shape(Base):\n    __tablename__ = 'shape_img'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    shape: Mapped[str] = mapped_column(String(255))\n    img_url: Mapped[str] = mapped_column(String(255))\n    catalog: Mapped[List[\"Catalog\"]] = relationship(\n        \"Catalog\", back_populates=\"shape\"\n    )",
        "detail": "app.models.shape",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models.user",
        "description": "app.models.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = 'users'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)\n    role: Mapped[str] = mapped_column(String, index=True, default='user')\n    full_name: Mapped[str] = mapped_column(String, nullable=False, index=True)\n    email: Mapped[str] = mapped_column(String, unique=True, nullable=False, index=True)\n    phone: Mapped[str] = mapped_column(String, unique=True, nullable=False, index=True)\n    password_hash: Mapped[str] = mapped_column(String, nullable=False)\n    cart_items: Mapped[list[\"CartItem\"]] = relationship(\n        back_populates=\"user\",",
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "CartRequest",
        "kind": 6,
        "importPath": "app.schemas.cart_schema",
        "description": "app.schemas.cart_schema",
        "peekOfCode": "class CartRequest(BaseModel):\n    product_id: int\nclass CartResponse(BaseModel):\n    message: str\nclass UpdateCartItemRequest(BaseModel):\n    quantity: int = Field(..., ge=1)\nclass GetCartResponse(BaseModel):\n    product: CatalogItemSchema\n    quantity: int\n    class Config:",
        "detail": "app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "CartResponse",
        "kind": 6,
        "importPath": "app.schemas.cart_schema",
        "description": "app.schemas.cart_schema",
        "peekOfCode": "class CartResponse(BaseModel):\n    message: str\nclass UpdateCartItemRequest(BaseModel):\n    quantity: int = Field(..., ge=1)\nclass GetCartResponse(BaseModel):\n    product: CatalogItemSchema\n    quantity: int\n    class Config:\n        from_attributes = True\nclass CartListResponse(BaseModel):",
        "detail": "app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "UpdateCartItemRequest",
        "kind": 6,
        "importPath": "app.schemas.cart_schema",
        "description": "app.schemas.cart_schema",
        "peekOfCode": "class UpdateCartItemRequest(BaseModel):\n    quantity: int = Field(..., ge=1)\nclass GetCartResponse(BaseModel):\n    product: CatalogItemSchema\n    quantity: int\n    class Config:\n        from_attributes = True\nclass CartListResponse(BaseModel):\n    cart: List[GetCartResponse]",
        "detail": "app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "GetCartResponse",
        "kind": 6,
        "importPath": "app.schemas.cart_schema",
        "description": "app.schemas.cart_schema",
        "peekOfCode": "class GetCartResponse(BaseModel):\n    product: CatalogItemSchema\n    quantity: int\n    class Config:\n        from_attributes = True\nclass CartListResponse(BaseModel):\n    cart: List[GetCartResponse]",
        "detail": "app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "CartListResponse",
        "kind": 6,
        "importPath": "app.schemas.cart_schema",
        "description": "app.schemas.cart_schema",
        "peekOfCode": "class CartListResponse(BaseModel):\n    cart: List[GetCartResponse]",
        "detail": "app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "CatalogQuerySchema",
        "kind": 6,
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "peekOfCode": "class CatalogQuerySchema(BaseModel):\n    page: int = Field(default=1, ge=1)\n    items_per_page: int = Field(default=8, ge=1, le=100)\n    search_code: Optional[str] = Field(default=None)\n    search_shape: Optional[str] = Field(default=None)\n    search_dimensions: Optional[str] = Field(default=None)\n    search_machine: Optional[str] = Field(default=None)\n    bond_ids: Optional[List[int]] = Field(default=None)\n    grid_size_ids: Optional[List[int]] = Field(default=None)\n    mounting_ids: Optional[List[int]] = Field(default=None)",
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "MountingSchema",
        "kind": 6,
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "peekOfCode": "class MountingSchema(BaseModel):\n    mm: str\n    inch: str\n    model_config = ConfigDict(from_attributes=True)\nclass BondSchema(BaseModel):\n    name_bond: str\n    bond_description: str\n    bond_cooling: str\n    model_config = ConfigDict(from_attributes=True)\nclass EquipmentModelSchema(BaseModel):",
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "BondSchema",
        "kind": 6,
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "peekOfCode": "class BondSchema(BaseModel):\n    name_bond: str\n    bond_description: str\n    bond_cooling: str\n    model_config = ConfigDict(from_attributes=True)\nclass EquipmentModelSchema(BaseModel):\n    model: str\n    name_producer: str\n    model_config = ConfigDict(from_attributes=True)\nclass CatalogItemSchema(BaseModel):",
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "EquipmentModelSchema",
        "kind": 6,
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "peekOfCode": "class EquipmentModelSchema(BaseModel):\n    model: str\n    name_producer: str\n    model_config = ConfigDict(from_attributes=True)\nclass CatalogItemSchema(BaseModel):\n    id: int\n    code: str\n    shape: str\n    dimensions: str\n    images: str",
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogItemSchema",
        "kind": 6,
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "peekOfCode": "class CatalogItemSchema(BaseModel):\n    id: int\n    code: str\n    shape: str\n    dimensions: str\n    images: str\n    name_bonds: Optional[List[str]] = None\n    grid_size: Optional[str] = None\n    mounting: Optional[MountingSchema]\n    is_in_cart: bool = False",
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogItemDetailedSchema",
        "kind": 6,
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "peekOfCode": "class CatalogItemDetailedSchema(BaseModel):\n    item: CatalogItemSchema\n    bonds: Optional[List[BondSchema]] = None\n    machines: Optional[List[EquipmentModelSchema]] = None\n    mounting: Optional[MountingSchema] = None\n    model_config = ConfigDict(from_attributes=True)\nclass CatalogResponseSchema(BaseModel):\n    items: List[CatalogItemSchema]\n    total_items: int\n    total_pages: int",
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "CatalogResponseSchema",
        "kind": 6,
        "importPath": "app.schemas.catalog_schema",
        "description": "app.schemas.catalog_schema",
        "peekOfCode": "class CatalogResponseSchema(BaseModel):\n    items: List[CatalogItemSchema]\n    total_items: int\n    total_pages: int\n    current_page: int\n    items_per_page: int",
        "detail": "app.schemas.catalog_schema",
        "documentation": {}
    },
    {
        "label": "BondFilterSchema",
        "kind": 6,
        "importPath": "app.schemas.data_schema",
        "description": "app.schemas.data_schema",
        "peekOfCode": "class BondFilterSchema(BaseModel):\n    id: int\n    name_bond: str\n    model_config = ConfigDict(from_attributes=True)\nclass GridFilterSchema(BaseModel):\n    id: int\n    grid_size: str\n    model_config = ConfigDict(from_attributes=True)\nclass MountingFilterSchema(BaseModel):\n    id: int",
        "detail": "app.schemas.data_schema",
        "documentation": {}
    },
    {
        "label": "GridFilterSchema",
        "kind": 6,
        "importPath": "app.schemas.data_schema",
        "description": "app.schemas.data_schema",
        "peekOfCode": "class GridFilterSchema(BaseModel):\n    id: int\n    grid_size: str\n    model_config = ConfigDict(from_attributes=True)\nclass MountingFilterSchema(BaseModel):\n    id: int\n    mm: str\n    inch: str\n    model_config = ConfigDict(from_attributes=True)\nclass FilterResponseSchema(BaseModel):",
        "detail": "app.schemas.data_schema",
        "documentation": {}
    },
    {
        "label": "MountingFilterSchema",
        "kind": 6,
        "importPath": "app.schemas.data_schema",
        "description": "app.schemas.data_schema",
        "peekOfCode": "class MountingFilterSchema(BaseModel):\n    id: int\n    mm: str\n    inch: str\n    model_config = ConfigDict(from_attributes=True)\nclass FilterResponseSchema(BaseModel):\n    bonds: List[BondFilterSchema]\n    grids: Optional[List[GridFilterSchema]] = None\n    mountings: Optional[List[MountingFilterSchema]] = None\nclass CategorySchema(BaseModel):",
        "detail": "app.schemas.data_schema",
        "documentation": {}
    },
    {
        "label": "FilterResponseSchema",
        "kind": 6,
        "importPath": "app.schemas.data_schema",
        "description": "app.schemas.data_schema",
        "peekOfCode": "class FilterResponseSchema(BaseModel):\n    bonds: List[BondFilterSchema]\n    grids: Optional[List[GridFilterSchema]] = None\n    mountings: Optional[List[MountingFilterSchema]] = None\nclass CategorySchema(BaseModel):\n    id: int\n    name: str\n    img_url: str\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "app.schemas.data_schema",
        "documentation": {}
    },
    {
        "label": "CategorySchema",
        "kind": 6,
        "importPath": "app.schemas.data_schema",
        "description": "app.schemas.data_schema",
        "peekOfCode": "class CategorySchema(BaseModel):\n    id: int\n    name: str\n    img_url: str\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "app.schemas.data_schema",
        "documentation": {}
    },
    {
        "label": "CreatePostRequest",
        "kind": 6,
        "importPath": "app.schemas.post_schema",
        "description": "app.schemas.post_schema",
        "peekOfCode": "class CreatePostRequest(BaseModel):\n    title: str\n    content: str\n    image: str | None = None\nclass PostResponse(BaseModel):\n    id: int\n    title: str\n    content: str\n    image: Optional[str] = None\n    created_at: datetime",
        "detail": "app.schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "PostResponse",
        "kind": 6,
        "importPath": "app.schemas.post_schema",
        "description": "app.schemas.post_schema",
        "peekOfCode": "class PostResponse(BaseModel):\n    id: int\n    title: str\n    content: str\n    image: Optional[str] = None\n    created_at: datetime\n    updated_at: datetime\n    user_id: int\n    class Config:\n        from_attributes = True",
        "detail": "app.schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "EditPostRequest",
        "kind": 6,
        "importPath": "app.schemas.post_schema",
        "description": "app.schemas.post_schema",
        "peekOfCode": "class EditPostRequest(BaseModel):\n    title: str\n    content: str\n    image: Optional[str] = None\nclass DeletePostResponse(BaseModel):\n    detail: str\nclass ImageUploadResponse(BaseModel):\n    filename: str\n    url: str",
        "detail": "app.schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "DeletePostResponse",
        "kind": 6,
        "importPath": "app.schemas.post_schema",
        "description": "app.schemas.post_schema",
        "peekOfCode": "class DeletePostResponse(BaseModel):\n    detail: str\nclass ImageUploadResponse(BaseModel):\n    filename: str\n    url: str",
        "detail": "app.schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "ImageUploadResponse",
        "kind": 6,
        "importPath": "app.schemas.post_schema",
        "description": "app.schemas.post_schema",
        "peekOfCode": "class ImageUploadResponse(BaseModel):\n    filename: str\n    url: str",
        "detail": "app.schemas.post_schema",
        "documentation": {}
    },
    {
        "label": "UserData",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class UserData(BaseModel):\n    id: int\n    full_name: str\n    email: str\n    phone: str\n    role: str\n    class Config:\n        from_attributes = True\nclass TokenBundle(BaseModel):\n    access_token: str",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "TokenBundle",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class TokenBundle(BaseModel):\n    access_token: str\n    refresh_token: str\n    token_type: str = \"bearer\"\nclass RegisterRequest(BaseModel):\n    full_name: str\n    email: EmailStr\n    phone: str\n    password: str\nclass LoginRequest(BaseModel):",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "RegisterRequest",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class RegisterRequest(BaseModel):\n    full_name: str\n    email: EmailStr\n    phone: str\n    password: str\nclass LoginRequest(BaseModel):\n    email: EmailStr\n    password: str\nclass RefreshTokenRequest(BaseModel):\n    refresh_token: str",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "LoginRequest",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class LoginRequest(BaseModel):\n    email: EmailStr\n    password: str\nclass RefreshTokenRequest(BaseModel):\n    refresh_token: str\nclass LogoutRequest(BaseModel):\n    refresh_token: str\nclass UpdateUserRequest(BaseModel):\n    full_name: str | None = Field(None, min_length=2)\n    email: EmailStr | None = None",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "RefreshTokenRequest",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class RefreshTokenRequest(BaseModel):\n    refresh_token: str\nclass LogoutRequest(BaseModel):\n    refresh_token: str\nclass UpdateUserRequest(BaseModel):\n    full_name: str | None = Field(None, min_length=2)\n    email: EmailStr | None = None\n    phone: str | None = Field(None, min_length=8, max_length=20)\n    password: str | None = Field(None, min_length=6)\nclass MessageResponse(BaseModel):",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "LogoutRequest",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class LogoutRequest(BaseModel):\n    refresh_token: str\nclass UpdateUserRequest(BaseModel):\n    full_name: str | None = Field(None, min_length=2)\n    email: EmailStr | None = None\n    phone: str | None = Field(None, min_length=8, max_length=20)\n    password: str | None = Field(None, min_length=6)\nclass MessageResponse(BaseModel):\n    message: str\nclass TokenResponse(TokenBundle):",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UpdateUserRequest",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class UpdateUserRequest(BaseModel):\n    full_name: str | None = Field(None, min_length=2)\n    email: EmailStr | None = None\n    phone: str | None = Field(None, min_length=8, max_length=20)\n    password: str | None = Field(None, min_length=6)\nclass MessageResponse(BaseModel):\n    message: str\nclass TokenResponse(TokenBundle):\n    message: str\nclass UserResponse(BaseModel):",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "MessageResponse",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class MessageResponse(BaseModel):\n    message: str\nclass TokenResponse(TokenBundle):\n    message: str\nclass UserResponse(BaseModel):\n    user: UserData",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "TokenResponse",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class TokenResponse(TokenBundle):\n    message: str\nclass UserResponse(BaseModel):\n    user: UserData",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "peekOfCode": "class UserResponse(BaseModel):\n    user: UserData",
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "job_cleanup_tokens",
        "kind": 2,
        "importPath": "app.tasks.scheduler",
        "description": "app.tasks.scheduler",
        "peekOfCode": "def job_cleanup_tokens():\n    try:\n        db: Session = SessionLocal()\n        deleted_count = cleanup_expired_tokens(db)\n        db.close()\n    except Exception as e:\n        logging.error(f\"Error executing background token cleanup task: {e}\")\ndef start_scheduler():\n    scheduler.add_job(\n        job_cleanup_tokens,",
        "detail": "app.tasks.scheduler",
        "documentation": {}
    },
    {
        "label": "start_scheduler",
        "kind": 2,
        "importPath": "app.tasks.scheduler",
        "description": "app.tasks.scheduler",
        "peekOfCode": "def start_scheduler():\n    scheduler.add_job(\n        job_cleanup_tokens,\n        IntervalTrigger(hours=1),\n        id=\"cleanup_tokens\",\n        name=\"Cleanup expired tokens\",\n        replace_existing=True,\n    )\n    scheduler.start()\n    logging.info(\"Task Scheduler started.\")",
        "detail": "app.tasks.scheduler",
        "documentation": {}
    },
    {
        "label": "stop_scheduler",
        "kind": 2,
        "importPath": "app.tasks.scheduler",
        "description": "app.tasks.scheduler",
        "peekOfCode": "def stop_scheduler():\n    scheduler.shutdown(wait=False)\n    logging.info(\"Task Scheduler stopped.\")",
        "detail": "app.tasks.scheduler",
        "documentation": {}
    },
    {
        "label": "scheduler",
        "kind": 5,
        "importPath": "app.tasks.scheduler",
        "description": "app.tasks.scheduler",
        "peekOfCode": "scheduler = BackgroundScheduler()\ndef job_cleanup_tokens():\n    try:\n        db: Session = SessionLocal()\n        deleted_count = cleanup_expired_tokens(db)\n        db.close()\n    except Exception as e:\n        logging.error(f\"Error executing background token cleanup task: {e}\")\ndef start_scheduler():\n    scheduler.add_job(",
        "detail": "app.tasks.scheduler",
        "documentation": {}
    },
    {
        "label": "apply_catalog_filters",
        "kind": 2,
        "importPath": "app.utils.apply_catalog_filters",
        "description": "app.utils.apply_catalog_filters",
        "peekOfCode": "def apply_catalog_filters(query: Any, search_params: dict):\n    if search_params.get('category_id'):\n        query = query.filter(Catalog.category_id == search_params['category_id'])\n    if search_params.get('search_code'):\n        query = query.filter(func.lower(Catalog.code).like(f\"%{search_params['search_code'].lower()}%\"))\n    if search_params.get('search_shape'):\n        query = query.join(Catalog.shape).filter(func.lower(Shape.shape).like(f\"%{search_params['search_shape'].lower()}%\"))\n    if search_params.get('search_dimensions'):\n        query = query.filter(func.lower(Catalog.dimensions).like(f\"%{search_params['search_dimensions'].lower()}%\"))\n    if search_params.get('search_machine'):",
        "detail": "app.utils.apply_catalog_filters",
        "documentation": {}
    },
    {
        "label": "redis_client",
        "kind": 5,
        "importPath": "app.utils.cache",
        "description": "app.utils.cache",
        "peekOfCode": "redis_client = AsyncRedis(\n    host=settings.CACHE_REDIS_HOST,\n    port=settings.CACHE_REDIS_PORT,\n    db=settings.CACHE_REDIS_DB,\n    decode_responses=settings.CACHE_REDIS_DECODE_RESPONSES,\n    password=settings.CACHE_REDIS_PASSWORD\n)\nasync def cache_get(key: str) -> Optional[Any]:\n    if settings.DISABLE_REDIS_CACHE:\n        return None",
        "detail": "app.utils.cache",
        "documentation": {}
    },
    {
        "label": "build_catalog_item",
        "kind": 2,
        "importPath": "app.utils.catalog_helpers",
        "description": "app.utils.catalog_helpers",
        "peekOfCode": "def build_catalog_item(item, is_in_cart: bool = False) -> CatalogItemSchema:\n    return CatalogItemSchema(\n        code=str(item.code),\n        shape=str(item.shape),\n        dimensions=str(item.dimensions),\n        images=item.shape_info.img_url if item.shape_info else None,\n        name_bonds=List(item.name_bonds),\n        grid_size=str(item.grid_size),\n        is_in_cart=is_in_cart,\n    )",
        "detail": "app.utils.catalog_helpers",
        "documentation": {}
    },
    {
        "label": "make_cache_key",
        "kind": 2,
        "importPath": "app.utils.catalog_helpers",
        "description": "app.utils.catalog_helpers",
        "peekOfCode": "def make_cache_key(params: CatalogQuerySchema, user_id: int):\n    key_parts = [\n        f\"page_{params.page}\",\n        f\"ipp_{params.items_per_page}\",\n        f\"code_{params.search_code or ''}\",\n        f\"shape_{params.search_shape or ''}\",\n        f\"dims_{params.search_dimensions or ''}\",\n        f\"machine_{params.search_machine or ''}\",\n        f\"user_{user_id}\",\n        f\"category_{params.category_id or ''}\",",
        "detail": "app.utils.catalog_helpers",
        "documentation": {}
    },
    {
        "label": "parse_query_params",
        "kind": 2,
        "importPath": "app.utils.catalog_helpers",
        "description": "app.utils.catalog_helpers",
        "peekOfCode": "def parse_query_params(\n    page: int = Query(1, ge=1),\n    items_per_page: int = Query(8, ge=1, le=100),\n    search_code: Optional[str] = Query(None),\n    search_shape: Optional[str] = Query(None),\n    search_dimensions: Optional[str] = Query(None),\n    search_machine: Optional[str] = Query(None),\n    bond_ids: Optional[List[int]] = Query(None),\n    grid_size_ids: Optional[List[int]] = Query(None),\n    mounting_ids: Optional[List[int]] = Query(None),",
        "detail": "app.utils.catalog_helpers",
        "documentation": {}
    },
    {
        "label": "sanitize_html",
        "kind": 2,
        "importPath": "app.utils.sanitize_html",
        "description": "app.utils.sanitize_html",
        "peekOfCode": "def sanitize_html(html_content: str) -> str:\n    return bleach.clean(\n        html_content,\n        tags=ALLOWED_TAGS,\n        attributes=ALLOWED_ATTRIBUTES,\n        strip=True\n    )",
        "detail": "app.utils.sanitize_html",
        "documentation": {}
    },
    {
        "label": "ALLOWED_TAGS",
        "kind": 5,
        "importPath": "app.utils.sanitize_html",
        "description": "app.utils.sanitize_html",
        "peekOfCode": "ALLOWED_TAGS = {'p', 'b', 'i', 'u', 'em', 'strong', 'a', 'h1', 'h2', 'h3', 'ul', 'ol', 'li', 'br', 'img'}\nALLOWED_ATTRIBUTES = {\n    'a': ['href', 'title', 'target'],\n    'img': ['src', 'alt', 'width', 'height'],\n}\ndef sanitize_html(html_content: str) -> str:\n    return bleach.clean(\n        html_content,\n        tags=ALLOWED_TAGS,\n        attributes=ALLOWED_ATTRIBUTES,",
        "detail": "app.utils.sanitize_html",
        "documentation": {}
    },
    {
        "label": "ALLOWED_ATTRIBUTES",
        "kind": 5,
        "importPath": "app.utils.sanitize_html",
        "description": "app.utils.sanitize_html",
        "peekOfCode": "ALLOWED_ATTRIBUTES = {\n    'a': ['href', 'title', 'target'],\n    'img': ['src', 'alt', 'width', 'height'],\n}\ndef sanitize_html(html_content: str) -> str:\n    return bleach.clean(\n        html_content,\n        tags=ALLOWED_TAGS,\n        attributes=ALLOWED_ATTRIBUTES,\n        strip=True",
        "detail": "app.utils.sanitize_html",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI(title=\"Search App API\", lifespan=lifespan_context)\n@app.exception_handler(HTTPException)\nasync def http_exception_handler(request: Request, exc: HTTPException):\n    logging.error(f\"HTTP Exception: {exc.detail} - Status Code: {exc.status_code}\")\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\"detail\": exc.detail}\n    )\n@app.exception_handler(Exception)\nasync def general_exception_handler(request: Request, exc: Exception):",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass\n        tee_f.write(what)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_root_hkey",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU\n        return winreg.HKEY_CURRENT_USER",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "create_shortcut",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def create_shortcut(\n    path, description, filename, arguments=\"\", workdir=\"\", iconpath=\"\", iconindex=0\n):\n    import pythoncom\n    from win32com.shell import shell\n    ilink = pythoncom.CoCreateInstance(\n        shell.CLSID_ShellLink,\n        None,\n        pythoncom.CLSCTX_INPROC_SERVER,\n        shell.IID_IShellLink,",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_special_folder_path",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_special_folder_path(path_name):\n    from win32com.shell import shell, shellcon\n    for maybe in \"\"\"\n        CSIDL_COMMON_STARTMENU CSIDL_STARTMENU CSIDL_COMMON_APPDATA\n        CSIDL_LOCAL_APPDATA CSIDL_APPDATA CSIDL_COMMON_DESKTOPDIRECTORY\n        CSIDL_DESKTOPDIRECTORY CSIDL_COMMON_STARTUP CSIDL_STARTUP\n        CSIDL_COMMON_PROGRAMS CSIDL_PROGRAMS CSIDL_PROGRAM_FILES_COMMON\n        CSIDL_PROGRAM_FILES CSIDL_FONTS\"\"\".split():\n        if maybe == path_name:\n            csidl = getattr(shellcon, maybe)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info.major,\n        sys.version_info.minor,\n        suffix,",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(f\"-> {root_key_name}\\\\{key_name}[{value_name}]={value!r}\")\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(f\"-> DELETE {root_key_name}\\\\{key_name}[{value_name}]\")\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n    to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(f\"Failed to unregister COM objects: {why}\")\n    try:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location: str) -> str:\n    location = os.path.abspath(location)\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError(\n            f'Path \"{location}\" is not an existing directory!'\n        )\n    return location\ndef main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python -m pywin32_postinstall -install\n    * or (shorter but you don't have control over which python environment is used)\n    > pywin32_postinstall -install\n    You need to execute this script, with a '-install' parameter,\n    to ensure the environment is setup correctly to install COM objects, services, etc.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(\n    os.path.join(\n        tempfile.gettempdir(),  # Send output somewhere so it can be found if necessary...\n        \"pywin32_postinstall.log\",\n    ),\n    \"w\",\n)\nclass Tee:\n    def __init__(self, file):\n        self.f = file",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(f\"*** Test script '{script}' exited with {result.returncode}\")\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [project_root] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "project_root",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))\nsite_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    }
]